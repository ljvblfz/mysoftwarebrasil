///////////////////////////////////////////////////////////
//  Zend_Db_Table_Rowset_Abstract.cs
//  Implementation of the Class Zend_Db_Table_Rowset_Abstract
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:46
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Table;
namespace Zend.Db.Table.Rowset {
	/// <summary>
	/// @category   Zend
	///          @package    Zend_Db
	///          @subpackage Table
	///          @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///          @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public abstract class Zend_Db_Table_Rowset_Abstract : SeekableIterator, Countable, ArrayAccess {

		/// <summary>
		/// Connected is true if we have a reference to a live Zend_Db_Table_Abstract
		/// object. This is false after the Rowset has been deserialized.
		///            @var boolean
		/// </summary>
		protected var _connected = true;
		/// <summary>
		/// How many data rows there are.
		///            @var integer
		/// </summary>
		protected var _count;
		/// <summary>
		/// The original data for each row.
		///            @var array
		/// </summary>
		protected var _data = array();
		/// <summary>
		/// Iterator pointer.
		///            @var integer
		/// </summary>
		protected var _pointer = 0;
		/// <summary>
		/// @var boolean
		/// </summary>
		protected var _readOnly = false;
		/// <summary>
		/// Zend_Db_Table_Row_Abstract class name.
		///            @var string
		/// </summary>
		protected var _rowClass = 'Zend_Db_Table_Row';
		/// <summary>
		/// Collection of instantiated Zend_Db_Table_Row objects.
		///            @var array
		/// </summary>
		protected var _rows = array();
		/// <summary>
		/// @var boolean
		/// </summary>
		protected var _stored = false;
		/// <summary>
		/// Zend_Db_Table_Abstract object.
		///            @var Zend_Db_Table_Abstract
		/// </summary>
		protected var _table;
		/// <summary>
		/// Zend_Db_Table_Abstract class name.
		///            @var string
		/// </summary>
		protected var _tableClass;

		public Zend_Db_Table_Rowset_Abstract(){

		}

		~Zend_Db_Table_Rowset_Abstract(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param>array $config</param>
		/// <param name="config"></param>
		public var __construct(array config){

			return null;
		}

		/// <summary>
		/// Store data, class names, and state in serialized object
		/// </summary>
		/// array
		public var __sleep(){

			return null;
		}

		/// <summary>
		/// Setup to do on wakeup. A de-serialized Rowset should not be assumed to have
		/// access to a live database connection, so set _connected = false.
		/// </summary>
		/// void
		public var __wakeup(){

			return null;
		}

		/// <summary>
		/// Returns the number of elements in the collection.  Implements Countable::
		/// count()
		/// </summary>
		/// int
		public var count(){

			return null;
		}

		/// <summary>
		/// Return the current element. Similar to the current() function for arrays in PHP
		/// Required by interface Iterator.
		/// </summary>
		/// Zend_Db_Table_Row_Abstract current element from the collection
		public var current(){

			return null;
		}

		/// <summary>
		/// Returns a Zend_Db_Table_Row from a known position into the Iterator
		/// </summary>
		/// <param>int $position the position of the row expected</param>
		/// <param>bool $seek wether or not seek the iterator to that position
		/// after</param>
		/// <param>Zend_Db_Table_Row</param>
		/// <param name="position"></param>
		/// <param name="seek"></param>
		public var getRow(var position, var seek){

			return null;
		}

		/// <summary>
		/// Returns the table object, or null if this is disconnected rowset
		/// </summary>
		/// Zend_Db_Table_Abstract
		public var getTable(){

			return null;
		}

		/// <summary>
		/// Query the class name of the Table object for which this Rowset was created.
		/// </summary>
		/// string
		public var getTableClass(){

			return null;
		}

		/// <summary>
		/// Initialize object  Called from {@link __construct()} as final step of object
		/// instantiation.
		///            @return void
		/// </summary>
		public var init(){

			return null;
		}

		/// <summary>
		/// Return the connected state of the rowset.
		/// </summary>
		/// boolean
		public var isConnected(){

			return null;
		}

		/// <summary>
		/// Return the identifying key of the current element. Similar to the key()
		/// function for arrays in PHP. Required by interface Iterator.
		/// </summary>
		/// int
		public var key(){

			return null;
		}

		/// <summary>
		/// Move forward to next element. Similar to the next() function for arrays in PHP.
		/// Required by interface Iterator.
		/// </summary>
		/// void
		public var next(){

			return null;
		}

		/// <summary>
		/// Check if an offset exists Required by the ArrayAccess implementation
		/// </summary>
		/// <param>string $offset</param>
		/// <param>boolean</param>
		/// <param name="offset"></param>
		public var offsetExists(var offset){

			return null;
		}

		/// <summary>
		/// Get the row for the given offset Required by the ArrayAccess implementation
		/// </summary>
		/// <param>string $offset</param>
		/// <param>Zend_Db_Table_Row_Abstract</param>
		/// <param name="offset"></param>
		public var offsetGet(var offset){

			return null;
		}

		/// <summary>
		/// Does nothing Required by the ArrayAccess implementation
		/// </summary>
		/// <param>string $offset</param>
		/// <param>mixed $value</param>
		/// <param name="offset"></param>
		/// <param name="value"></param>
		public var offsetSet(var offset, var value){

			return null;
		}

		/// <summary>
		/// Does nothing Required by the ArrayAccess implementation
		/// </summary>
		/// <param>string $offset</param>
		/// <param name="offset"></param>
		public var offsetUnset(var offset){

			return null;
		}

		/// <summary>
		/// Rewind the Iterator to the first element. Similar to the reset() function for
		/// arrays in PHP. Required by interface Iterator.
		/// </summary>
		/// Zend_Db_Table_Rowset_Abstract Fluent interface.
		public var rewind(){

			return null;
		}

		/// <summary>
		/// Take the Iterator to position $position Required by interface SeekableIterator.
		/// 
		/// </summary>
		/// <param>int $position the position to seek to</param>
		/// <param>Zend_Db_Table_Rowset_Abstract</param>
		/// <param name="position"></param>
		public var seek(var position){

			return null;
		}

		/// <summary>
		/// Set the table object, to re-establish a live connection to the database for a
		/// Rowset that has been de-serialized.
		/// </summary>
		/// <param>Zend_Db_Table_Abstract $table</param>
		/// <param>boolean</param>
		/// <param name="table"></param>
		public var setTable(Zend_Db_Table_Abstract table){

			return null;
		}

		/// <summary>
		/// Returns all data as an array.  Updates the $_data property with current row
		/// object values.
		/// </summary>
		/// array
		public var toArray(){

			return null;
		}

		/// <summary>
		/// Check if there is a current element after calls to rewind() or next(). Used to
		/// check if we've iterated to the end of the collection. Required by interface
		/// Iterator.
		/// </summary>
		/// bool False if there's nothing more to iterate over
		public var valid(){

			return null;
		}

	}//end Zend_Db_Table_Rowset_Abstract

}//end namespace Rowset