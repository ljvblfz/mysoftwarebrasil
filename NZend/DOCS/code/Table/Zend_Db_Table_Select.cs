///////////////////////////////////////////////////////////
//  Zend_Db_Table_Select.cs
//  Implementation of the Class Zend_Db_Table_Select
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:52
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Table;
using Zend.Db;
namespace Zend.Db.Table {
	/// <summary>
	/// Class for SQL SELECT query manipulation for the Zend_Db_Table component.
	///        @category   Zend
	///        @package    Zend_Db
	///        @subpackage Table
	///        @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///        @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public class Zend_Db_Table_Select : Zend_Db_Select {

		/// <summary>
		/// Table schema for parent Zend_Db_Table.
		///          @var array
		/// </summary>
		protected var _info;
		/// <summary>
		/// Table integrity override.
		///          @var array
		/// </summary>
		protected var _integrityCheck = true;
		/// <summary>
		/// Table instance that created this select object
		///          @var Zend_Db_Table_Abstract
		/// </summary>
		protected var _table;

		public Zend_Db_Table_Select(){

		}

		~Zend_Db_Table_Select(){

		}

		public override void Dispose(){

		}

		/// <summary>
		/// Class constructor
		/// </summary>
		/// <param>Zend_Db_Table_Abstract $adapter</param>
		/// <param name="table"></param>
		public var __construct(Zend_Db_Table_Abstract table){

			return null;
		}

		/// <summary>
		/// Performs a validation on the select query before passing back to the parent
		/// class. Ensures that only columns from the primary Zend_Db_Table are returned in
		/// the result.
		/// </summary>
		/// string|null This object as a SELECT string (or null if a string cannot be
		/// produced)
		public var assemble(){

			return null;
		}

		/// <summary>
		/// Adds a FROM table and optional columns to the query.  The table name can be
		/// expressed
		/// </summary>
		/// <param>array|string|Zend_Db_Expr|Zend_Db_Table_Abstract $name The table name or
		/// an associative array relating table name to correlation name.</param>
		/// <param>array|string|Zend_Db_Expr $cols The columns to select from this table.
		/// </param>
		/// <param>string $schema The schema name to specify, if any.</param>
		/// <param>Zend_Db_Table_Select This Zend_Db_Table_Select object.</param>
		/// <param name="name"></param>
		/// <param name="cols"></param>
		/// <param name="schema"></param>
		public var from(var name, var cols, var schema){

			return null;
		}

		/// <summary>
		/// Return the table that created this select object
		/// </summary>
		/// Zend_Db_Table_Abstract
		public var getTable(){

			return null;
		}

		/// <summary>
		/// Tests query to determine if expressions or aliases columns exist.
		/// </summary>
		/// boolean
		public var isReadOnly(){

			return null;
		}

		/// <summary>
		/// Sets the integrity check flag.  Setting this flag to false skips the checks for
		/// table joins, allowing 'hybrid' table rows to be created.
		/// </summary>
		/// <param>Zend_Db_Table_Abstract $adapter</param>
		/// <param>Zend_Db_Select This Zend_Db_Select object.</param>
		/// <param name="flag"></param>
		public var setIntegrityCheck(var flag){

			return null;
		}

		/// <summary>
		/// Sets the primary table name and retrieves the table schema.
		/// </summary>
		/// <param>Zend_Db_Table_Abstract $adapter</param>
		/// <param>Zend_Db_Select This Zend_Db_Select object.</param>
		/// <param name="table"></param>
		public var setTable(Zend_Db_Table_Abstract table){

			return null;
		}

	}//end Zend_Db_Table_Select

}//end namespace Table