///////////////////////////////////////////////////////////
//  Zend_Db_Adapter_Pdo_Abstract.cs
//  Implementation of the Class Zend_Db_Adapter_Pdo_Abstract
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:10
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Adapter;
namespace Zend.Db.Adapter.Pdo {
	/// <summary>
	/// Class for connecting to SQL databases and performing common operations using
	/// PDO.
	///          @category   Zend
	///          @package    Zend_Db
	///          @subpackage Adapter
	///          @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///          @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public abstract class Zend_Db_Adapter_Pdo_Abstract : Zend_Db_Adapter_Abstract {

		/// <summary>
		/// Default class name for a DB statement.
		///            @var string
		/// </summary>
		protected var _defaultStmtClass = 'Zend_Db_Statement_Pdo';

		public Zend_Db_Adapter_Pdo_Abstract(){

		}

		~Zend_Db_Adapter_Pdo_Abstract(){

		}

		public override void Dispose(){

		}

		/// <summary>
		/// Begin a transaction.
		/// </summary>
		protected var _beginTransaction(){

			return null;
		}

		/// <summary>
		/// Commit a transaction.
		/// </summary>
		protected var _commit(){

			return null;
		}

		/// <summary>
		/// Creates a PDO object and connects to the database.
		/// </summary>
		/// void
		protected var _connect(){

			return null;
		}

		/// <summary>
		/// Creates a PDO DSN for the adapter from $this->_config settings.
		/// </summary>
		/// string
		protected var _dsn(){

			return null;
		}

		/// <summary>
		/// Quote a raw string.
		/// </summary>
		/// <param>string $value     Raw string</param>
		/// <param>string           Quoted string</param>
		/// <param name="value"></param>
		protected var _quote(var value){

			return null;
		}

		/// <summary>
		/// Roll-back a transaction.
		/// </summary>
		protected var _rollBack(){

			return null;
		}

		/// <summary>
		/// Force the connection to close.
		/// </summary>
		/// void
		public var closeConnection(){

			return null;
		}

		/// <summary>
		/// Executes an SQL statement and return the number of affected rows
		/// </summary>
		/// <param>mixed  $sql  The SQL statement with placeholders. May be a string or
		/// Zend_Db_Select.</param>
		/// <param>integer      Number of rows that were modified or deleted by the SQL
		/// statement</param>
		/// <param name="sql"></param>
		public var exec(var sql){

			return null;
		}

		/// <summary>
		/// Retrieve server version in PHP style
		/// </summary>
		/// string
		public var getServerVersion(){

			return null;
		}

		/// <summary>
		/// Test if a connection is active
		/// </summary>
		/// boolean
		public var isConnected(){

			return null;
		}

		/// <summary>
		/// Gets the last ID generated automatically by an IDENTITY/AUTOINCREMENT column.
		/// As a convention, on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2), this method forms the name of a sequence from the arguments
		/// and returns the last id generated by that sequence. On RDBMS brands that
		/// support IDENTITY/AUTOINCREMENT columns, this method returns the last value
		/// generated for such a column, and the table name argument is disregarded.  On
		/// RDBMS brands that don't support sequences, $tableName and $primaryKey are
		/// ignored.
		/// </summary>
		/// <param>string $tableName   OPTIONAL Name of table.</param>
		/// <param>string $primaryKey  OPTIONAL Name of primary key column.</param>
		/// <param>string</param>
		/// <param name="tableName"></param>
		/// <param name="primaryKey"></param>
		public var lastInsertId(var tableName, var primaryKey){

			return null;
		}

		/// <summary>
		/// Prepares an SQL statement.
		/// </summary>
		/// <param>string $sql The SQL statement with placeholders.</param>
		/// <param>array $bind An array of data to bind to the placeholders.</param>
		/// <param>PDOStatement</param>
		/// <param name="sql"></param>
		public var prepare(var sql){

			return null;
		}

		/// <summary>
		/// Special handling for PDO query(). All bind parameter names must begin with ':'
		/// </summary>
		/// <param>string|Zend_Db_Select $sql The SQL statement with placeholders.</param>
		/// <param>array $bind An array of data to bind to the placeholders.</param>
		/// <param>Zend_Db_Statement_Pdo</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var query(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Set the PDO fetch mode.
		///            @todo Support FETCH_CLASS and FETCH_INTO.
		///            @param int $mode A PDO fetch mode.
		///            @return void
		/// </summary>
		/// <param name="mode"></param>
		public var setFetchMode(var mode){

			return null;
		}

		/// <summary>
		/// Check if the adapter supports real SQL parameters.
		/// </summary>
		/// <param>string $type 'positional' or 'named'</param>
		/// <param>bool</param>
		/// <param name="type"></param>
		public var supportsParameters(var type){

			return null;
		}

	}//end Zend_Db_Adapter_Pdo_Abstract

}//end namespace Pdo