///////////////////////////////////////////////////////////
//  Zend_Db_Adapter_Abstract.cs
//  Implementation of the Class Zend_Db_Adapter_Abstract
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:20
//  Original author: alexis
///////////////////////////////////////////////////////////




namespace Zend.Db.Adapter {
	/// <summary>
	/// Class for connecting to SQL databases and performing common operations.
	///        @category   Zend
	///        @package    Zend_Db
	///        @subpackage Adapter
	///        @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///        @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public abstract class Zend_Db_Adapter_Abstract {

		/// <summary>
		/// Weither or not that object can get serialized
		///          @var bool
		/// </summary>
		protected var _allowSerialization = true;
		/// <summary>
		/// Specifies whether the adapter automatically quotes identifiers. If true, most
		/// SQL generated by Zend_Db classes applies identifier quoting automatically. If
		/// false, developer must quote identifiers themselves by calling quoteIdentifier().
		/// 
		///          @var bool
		/// </summary>
		protected var _autoQuoteIdentifiers = true;
		/// <summary>
		/// Weither or not the database should be reconnected to that adapter when waking
		/// up
		///          @var bool
		/// </summary>
		protected var _autoReconnectOnUnserialize = false;
		/// <summary>
		/// Specifies the case of column names retrieved in queries Options Zend_Db::
		/// CASE_NATURAL (default) Zend_Db::CASE_LOWER Zend_Db::CASE_UPPER
		///          @var integer
		/// </summary>
		protected var _caseFolding = Zend_Db::CASE_NATURAL;
		/// <summary>
		/// User-provided configuration
		///          @var array
		/// </summary>
		protected var _config = array();
		/// <summary>
		/// Database connection
		///          @var object|resource|null
		/// </summary>
		protected var _connection = null;
		/// <summary>
		/// Default class name for the profiler object.
		///          @var string
		/// </summary>
		protected var _defaultProfilerClass = 'Zend_Db_Profiler';
		/// <summary>
		/// Default class name for a DB statement.
		///          @var string
		/// </summary>
		protected var _defaultStmtClass = 'Zend_Db_Statement';
		/// <summary>
		/// Fetch mode
		///          @var integer
		/// </summary>
		protected var _fetchMode = Zend_Db::FETCH_ASSOC;
		/// <summary>
		/// Keys are UPPERCASE SQL datatypes or the constants Zend_Db::INT_TYPE, Zend_Db::
		/// BIGINT_TYPE, or Zend_Db::FLOAT_TYPE.  Values are: 0 = 32-bit integer 1 = 64-bit
		/// integer 2 = float or decimal
		///          @var array Associative array of datatypes to values 0, 1, or 2.
		/// </summary>
		protected var _numericDataTypes = array(
		                  Zend_Db::INT_TYPE    => Zend_Db::INT_TYPE,
		                  Zend_Db::BIGINT_TYPE => Zend_Db::BIGINT_TYPE,
		                  Zend_Db::FLOAT_TYPE  => Zend_Db::FLOAT_TYPE
		              );
		/// <summary>
		/// Query profiler object, of type Zend_Db_Profiler or a subclass of that.
		///          @var Zend_Db_Profiler
		/// </summary>
		protected var _profiler;

		public Zend_Db_Adapter_Abstract(){

		}

		~Zend_Db_Adapter_Abstract(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Constructor.  $config is an array of key/value pairs or an instance of
		/// Zend_Config containing configuration options.  These options are common to most
		/// adapters:  dbname         => (string) The name of the database to user username
		///      => (string) Connect to the database as this username. password       =>
		/// (string) Password associated with the username. host           => (string) What
		/// host to connect to, defaults to localhost  Some options are used on a case-by-
		/// case basis by adapters:  port           => (string) The port of the database
		/// persistent     => (boolean) Whether to use a persistent connection or not,
		/// defaults to false protocol       => (string) The network protocol, defaults to
		/// TCPIP caseFolding    => (int) style of case-alteration used for identifiers
		/// </summary>
		/// <param>array|Zend_Config $config An array or instance of Zend_Config having
		/// configuration data</param>
		/// <param name="config"></param>
		public var __construct(var config){

			return null;
		}

		/// <summary>
		/// called when object is getting serialized This disconnects the DB object that
		/// cant be serialized
		/// </summary>
		/// array
		public var __sleep(){

			return null;
		}

		/// <summary>
		/// called when object is getting unserialized
		/// </summary>
		/// void
		public var __wakeup(){

			return null;
		}

		/// <summary>
		/// Begin a transaction.
		/// </summary>
		protected abstract var _beginTransaction();

		/// <summary>
		/// Check for config options that are mandatory. Throw exceptions if any are
		/// missing.
		/// </summary>
		/// <param>array $config</param>
		/// <param name="config"></param>
		protected var _checkRequiredOptions(array config){

			return null;
		}

		/// <summary>
		/// Commit a transaction.
		/// </summary>
		protected abstract var _commit();

		/// <summary>
		/// Creates a connection to the database.
		/// </summary>
		/// void
		protected abstract var _connect();

		/// <summary>
		/// Quote a raw string.
		/// </summary>
		/// <param>string $value     Raw string</param>
		/// <param>string           Quoted string</param>
		/// <param name="value"></param>
		protected var _quote(var value){

			return null;
		}

		/// <summary>
		/// Quote an identifier.
		/// </summary>
		/// <param>string $value The identifier or expression.</param>
		/// <param>boolean $auto If true, heed the AUTO_QUOTE_IDENTIFIERS config option.
		/// </param>
		/// <param>string        The quoted identifier and alias.</param>
		/// <param name="value"></param>
		/// <param name="auto"></param>
		protected var _quoteIdentifier(var value, var auto){

			return null;
		}

		/// <summary>
		/// Quote an identifier and an optional alias.
		/// </summary>
		/// <param>string|array|Zend_Db_Expr $ident The identifier or expression.</param>
		/// <param>string $alias An optional alias.</param>
		/// <param>boolean $auto If true, heed the AUTO_QUOTE_IDENTIFIERS config option.
		/// </param>
		/// <param>string $as The string to add between the identifier/expression and the
		/// alias.</param>
		/// <param>string The quoted identifier and alias.</param>
		/// <param name="ident"></param>
		/// <param name="alias"></param>
		/// <param name="auto"></param>
		/// <param name="as"></param>
		protected var _quoteIdentifierAs(var ident, var alias, var auto, var as){

			return null;
		}

		/// <summary>
		/// Roll-back a transaction.
		/// </summary>
		protected abstract var _rollBack();

		/// <summary>
		/// Convert an array, string, or Zend_Db_Expr object into a string to put in a
		/// WHERE clause.
		/// </summary>
		/// <param>mixed $where</param>
		/// <param>string</param>
		/// <param name="where"></param>
		protected var _whereExpr(var where){

			return null;
		}

		/// <summary>
		/// Leave autocommit mode and begin a transaction.
		/// </summary>
		/// Zend_Db_Adapter_Abstract
		public var beginTransaction(){

			return null;
		}

		/// <summary>
		/// Force the connection to close.
		/// </summary>
		/// void
		public abstract var closeConnection();

		/// <summary>
		/// Commit a transaction and return to autocommit mode.
		/// </summary>
		/// Zend_Db_Adapter_Abstract
		public var commit(){

			return null;
		}

		/// <summary>
		/// Deletes table rows based on a WHERE clause.
		/// </summary>
		/// <param>mixed        $table The table to update.</param>
		/// <param>mixed        $where DELETE WHERE clause(s).</param>
		/// <param>int          The number of affected rows.</param>
		/// <param name="table"></param>
		/// <param name="where"></param>
		public var delete(var table, var where){

			return null;
		}

		/// <summary>
		/// Returns the column descriptions for a table.  The return value is an
		/// associative array keyed by the column name, as returned by the RDBMS.  The
		/// value of each array element is an associative array with the following keys:
		/// SCHEMA_NAME => string; name of database or schema TABLE_NAME  => string;
		/// COLUMN_NAME => string; column name COLUMN_POSITION => number; ordinal position
		/// of column in table DATA_TYPE   => string; SQL datatype name of column DEFAULT
		///  => string; default expression of column, null if none NULLABLE    => boolean;
		/// true if column can have nulls LENGTH      => number; length of CHAR/VARCHAR
		/// SCALE       => number; scale of NUMERIC/DECIMAL PRECISION   => number;
		/// precision of NUMERIC/DECIMAL UNSIGNED    => boolean; unsigned property of an
		/// integer type PRIMARY     => boolean; true if column is part of the primary key
		/// PRIMARY_POSITION => integer; position of column in primary key
		/// </summary>
		/// <param>string $tableName</param>
		/// <param>string $schemaName OPTIONAL</param>
		/// <param>array</param>
		/// <param name="tableName"></param>
		/// <param name="schemaName"></param>
		public abstract var describeTable(var tableName, var schemaName);

		/// <summary>
		/// Fetches all SQL result rows as a sequential array. Uses the current fetchMode
		/// for the adapter.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql  An SQL SELECT statement.</param>
		/// <param>mixed                 $bind Data to bind into SELECT placeholders.
		/// </param>
		/// <param>mixed                 $fetchMode Override current fetch mode.</param>
		/// <param>array</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		/// <param name="fetchMode"></param>
		public var fetchAll(var sql, var bind, var fetchMode){

			return null;
		}

		/// <summary>
		/// Fetches all SQL result rows as an associative array.  The first column is the
		/// key, the entire row array is the value.  You should construct the query to be
		/// sure that the first column contains unique values, or else rows with duplicate
		/// values in the first column will overwrite previous data.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql An SQL SELECT statement.</param>
		/// <param>mixed $bind Data to bind into SELECT placeholders.</param>
		/// <param>array</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var fetchAssoc(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Fetches the first column of all SQL result rows as an array.  The first column
		/// in each row is used as the array key.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql An SQL SELECT statement.</param>
		/// <param>mixed $bind Data to bind into SELECT placeholders.</param>
		/// <param>array</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var fetchCol(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Fetches the first column of the first row of the SQL result.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql An SQL SELECT statement.</param>
		/// <param>mixed $bind Data to bind into SELECT placeholders.</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var fetchOne(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Fetches all SQL result rows as an array of key-value pairs.  The first column
		/// is the key, the second column is the value.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql An SQL SELECT statement.</param>
		/// <param>mixed $bind Data to bind into SELECT placeholders.</param>
		/// <param>array</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var fetchPairs(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Fetches the first row of the SQL result. Uses the current fetchMode for the
		/// adapter.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql An SQL SELECT statement.</param>
		/// <param>mixed $bind Data to bind into SELECT placeholders.</param>
		/// <param>mixed                 $fetchMode Override current fetch mode.</param>
		/// <param>array</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		/// <param name="fetchMode"></param>
		public var fetchRow(var sql, var bind, var fetchMode){

			return null;
		}

		/// <summary>
		/// Helper method to change the case of the strings used when returning result sets
		/// in FETCH_ASSOC and FETCH_BOTH modes.  This is not intended to be used by
		/// application code, but the method must be public so the Statement class can
		/// invoke it.
		/// </summary>
		/// <param>string $key</param>
		/// <param>string</param>
		/// <param name="key"></param>
		public var foldCase(var key){

			return null;
		}

		/// <summary>
		/// Returns the configuration variables in this adapter.
		/// </summary>
		/// array
		public var getConfig(){

			return null;
		}

		/// <summary>
		/// Returns the underlying database connection object or resource. If not presently
		/// connected, this initiates the connection.
		/// </summary>
		/// object|resource|null
		public var getConnection(){

			return null;
		}

		/// <summary>
		/// Get the fetch mode.
		/// </summary>
		/// int
		public var getFetchMode(){

			return null;
		}

		/// <summary>
		/// Returns the profiler for this adapter.
		/// </summary>
		/// Zend_Db_Profiler
		public var getProfiler(){

			return null;
		}

		/// <summary>
		/// Returns the symbol the adapter uses for delimited identifiers.
		/// </summary>
		/// string
		public var getQuoteIdentifierSymbol(){

			return null;
		}

		/// <summary>
		/// Retrieve server version in PHP style
		/// </summary>
		/// string
		public abstract var getServerVersion();

		/// <summary>
		/// Get the default statement class.
		/// </summary>
		/// string
		public var getStatementClass(){

			return null;
		}

		/// <summary>
		/// Inserts a table row with specified data.
		/// </summary>
		/// <param>mixed $table The table to insert data into.</param>
		/// <param>array $bind Column-value pairs.</param>
		/// <param>int The number of affected rows.</param>
		/// <param name="table"></param>
		/// <param name="bind"></param>
		public var insert(var table, array bind){

			return null;
		}

		/// <summary>
		/// Test if a connection is active
		/// </summary>
		/// boolean
		public abstract var isConnected();

		/// <summary>
		/// Gets the last ID generated automatically by an IDENTITY/AUTOINCREMENT column.
		/// As a convention, on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2), this method forms the name of a sequence from the arguments
		/// and returns the last id generated by that sequence. On RDBMS brands that
		/// support IDENTITY/AUTOINCREMENT columns, this method returns the last value
		/// generated for such a column, and the table name argument is disregarded.
		/// </summary>
		/// <param>string $tableName   OPTIONAL Name of table.</param>
		/// <param>string $primaryKey  OPTIONAL Name of primary key column.</param>
		/// <param>string</param>
		/// <param name="tableName"></param>
		/// <param name="primaryKey"></param>
		public abstract var lastInsertId(var tableName, var primaryKey);

		/// <summary>
		/// Return the most recent value from the specified sequence in the database. This
		/// is supported only on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2).  Other RDBMS brands return null.
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>string</param>
		/// <param name="sequenceName"></param>
		public var lastSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Adds an adapter-specific LIMIT clause to the SELECT statement.
		/// </summary>
		/// <param>mixed $sql</param>
		/// <param>integer $count</param>
		/// <param>integer $offset</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		/// <param name="count"></param>
		/// <param name="offset"></param>
		public abstract var limit(var sql, var count, var offset);

		/// <summary>
		/// Returns a list of the tables in the database.
		/// </summary>
		/// array
		public abstract var listTables();

		/// <summary>
		/// Generate a new value from the specified sequence in the database, and return it.
		/// This is supported only on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2).  Other RDBMS brands return null.
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>string</param>
		/// <param name="sequenceName"></param>
		public var nextSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Prepare a statement and return a PDOStatement-like object.
		/// </summary>
		/// <param>string|Zend_Db_Select $sql SQL query</param>
		/// <param>Zend_Db_Statement|PDOStatement</param>
		/// <param name="sql"></param>
		public abstract var prepare(var sql);

		/// <summary>
		/// Prepares and executes an SQL statement with bound data.
		/// </summary>
		/// <param>mixed  $sql  The SQL statement with placeholders. May be a string or
		/// Zend_Db_Select.</param>
		/// <param>mixed  $bind An array of data to bind to the placeholders.</param>
		/// <param>Zend_Db_Statement_Interface</param>
		/// <param name="sql"></param>
		/// <param name="bind"></param>
		public var query(var sql, var bind){

			return null;
		}

		/// <summary>
		/// Safely quotes a value for an SQL statement.  If an array is passed as the value,
		/// the array values are quoted and then returned as a comma-separated string.
		/// </summary>
		/// <param>mixed $value The value to quote.</param>
		/// <param>mixed $type  OPTIONAL the SQL datatype name, or constant, or null.
		/// </param>
		/// <param>mixed An SQL-safe quoted value (or string of separated values).</param>
		/// <param name="value"></param>
		/// <param name="type"></param>
		public var quote(var value, var type){

			return null;
		}

		/// <summary>
		/// Quote a column identifier and alias.
		/// </summary>
		/// <param>string|array|Zend_Db_Expr $ident The identifier or expression.</param>
		/// <param>string $alias An alias for the column.</param>
		/// <param>boolean $auto If true, heed the AUTO_QUOTE_IDENTIFIERS config option.
		/// </param>
		/// <param>string The quoted identifier and alias.</param>
		/// <param name="ident"></param>
		/// <param name="alias"></param>
		/// <param name="auto"></param>
		public var quoteColumnAs(var ident, var alias, var auto){

			return null;
		}

		/// <summary>
		/// Quotes an identifier.  Accepts a string representing a qualified indentifier.
		/// For Example:
		///          <code> $adapter->quoteIdentifier('myschema.mytable')
		///          </code> Returns: "myschema"."mytable"  Or, an array of one or more
		/// identifiers that may form a qualified identifier:
		///          <code> $adapter->quoteIdentifier(array('myschema','my.table'))
		///          </code> Returns: "myschema"."my.table"  The actual quote character
		/// surrounding the identifiers may vary depending on the adapter.
		/// </summary>
		/// <param>string|array|Zend_Db_Expr $ident The identifier.</param>
		/// <param>boolean $auto If true, heed the AUTO_QUOTE_IDENTIFIERS config option.
		/// </param>
		/// <param>string The quoted identifier.</param>
		/// <param name="ident"></param>
		/// <param name="auto"></param>
		public var quoteIdentifier(var ident, var auto){

			return null;
		}

		/// <summary>
		/// Quotes a value and places into a piece of text at a placeholder.  The
		/// placeholder is a question-mark; all placeholders will be replaced with the
		/// quoted value.   For example:
		///          <code> $text = "WHERE date < ?"; $date = "2005-01-02"; $safe = $sql-
		/// >quoteInto($text, $date); $safe = "WHERE date < '2005-01-02'"
		///          </code>
		/// </summary>
		/// <param>string  $text  The text with a placeholder.</param>
		/// <param>mixed   $value The value to quote.</param>
		/// <param>string  $type  OPTIONAL SQL datatype</param>
		/// <param>integer $count OPTIONAL count of placeholders to replace</param>
		/// <param>string An SQL-safe quoted value placed into the original text.</param>
		/// <param name="text"></param>
		/// <param name="value"></param>
		/// <param name="type"></param>
		/// <param name="count"></param>
		public var quoteInto(var text, var value, var type, var count){

			return null;
		}

		/// <summary>
		/// Quote a table identifier and alias.
		/// </summary>
		/// <param>string|array|Zend_Db_Expr $ident The identifier or expression.</param>
		/// <param>string $alias An alias for the table.</param>
		/// <param>boolean $auto If true, heed the AUTO_QUOTE_IDENTIFIERS config option.
		/// </param>
		/// <param>string The quoted identifier and alias.</param>
		/// <param name="ident"></param>
		/// <param name="alias"></param>
		/// <param name="auto"></param>
		public var quoteTableAs(var ident, var alias, var auto){

			return null;
		}

		/// <summary>
		/// Roll back a transaction and return to autocommit mode.
		/// </summary>
		/// Zend_Db_Adapter_Abstract
		public var rollBack(){

			return null;
		}

		/// <summary>
		/// Creates and returns a new Zend_Db_Select object for this adapter.
		/// </summary>
		/// Zend_Db_Select
		public var select(){

			return null;
		}

		/// <summary>
		/// Set the fetch mode.
		/// </summary>
		/// <param>integer $mode</param>
		/// <param>void</param>
		/// <param name="mode"></param>
		public abstract var setFetchMode(var mode);

		/// <summary>
		/// Set the adapter's profiler object.  The argument may be a boolean, an
		/// associative array, an instance of Zend_Db_Profiler, or an instance of
		/// Zend_Config.  A boolean argument sets the profiler to enabled if true, or
		/// disabled if false.  The profiler class is the adapter's default profiler class,
		/// Zend_Db_Profiler.  An instance of Zend_Db_Profiler sets the adapter's instance
		/// to that object.  The profiler is enabled and disabled separately.  An
		/// associative array argument may contain any of the keys 'enabled', 'class', and
		/// 'instance'. The 'enabled' and 'instance' keys correspond to the boolean and
		/// object types documented above. The 'class' key is used to name a class to use
		/// for a custom profiler. The class must be Zend_Db_Profiler or a subclass. The
		/// class is instantiated with no constructor arguments. The 'class' option is
		/// ignored when the 'instance' option is supplied.  An object of type Zend_Config
		/// may contain the properties 'enabled', 'class', and 'instance', just as if an
		/// associative array had been passed instead.
		/// </summary>
		/// <param>Zend_Db_Profiler|Zend_Config|array|boolean $profiler</param>
		/// <param>Zend_Db_Adapter_Abstract Provides a fluent interface</param>
		/// <param name="profiler"></param>
		public var setProfiler(var profiler){

			return null;
		}

		/// <summary>
		/// Set the default statement class.
		/// </summary>
		/// Zend_Db_Adapter_Abstract Fluent interface
		/// <param name="class"></param>
		public var setStatementClass(var class){

			return null;
		}

		/// <summary>
		/// Check if the adapter supports real SQL parameters.
		/// </summary>
		/// <param>string $type 'positional' or 'named'</param>
		/// <param>bool</param>
		/// <param name="type"></param>
		public abstract var supportsParameters(var type);

		/// <summary>
		/// Updates table rows with specified data based on a WHERE clause.
		/// </summary>
		/// <param>mixed        $table The table to update.</param>
		/// <param>array        $bind  Column-value pairs.</param>
		/// <param>mixed        $where UPDATE WHERE clause(s).</param>
		/// <param>int          The number of affected rows.</param>
		/// <param name="table"></param>
		/// <param name="bind"></param>
		/// <param name="where"></param>
		public var update(var table, array bind, var where){

			return null;
		}

	}//end Zend_Db_Adapter_Abstract

}//end namespace Adapter