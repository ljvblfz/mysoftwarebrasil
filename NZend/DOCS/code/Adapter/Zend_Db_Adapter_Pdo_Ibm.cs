///////////////////////////////////////////////////////////
//  Zend_Db_Adapter_Pdo_Ibm.cs
//  Implementation of the Class Zend_Db_Adapter_Pdo_Ibm
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:12
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Adapter.Pdo;
namespace Zend.Db.Adapter.Pdo {
	/// <summary>
	/// @category   Zend
	///          @package    Zend_Db
	///          @subpackage Adapter
	///          @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///          @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public class Zend_Db_Adapter_Pdo_Ibm : Zend_Db_Adapter_Pdo_Abstract {

		/// <summary>
		/// Keys are UPPERCASE SQL datatypes or the constants Zend_Db::INT_TYPE, Zend_Db::
		/// BIGINT_TYPE, or Zend_Db::FLOAT_TYPE.  Values are: 0 = 32-bit integer 1 = 64-bit
		/// integer 2 = float or decimal
		///            @var array Associative array of datatypes to values 0, 1, or 2.
		/// </summary>
		protected var _numericDataTypes = array(
		                                    Zend_Db::INT_TYPE    => Zend_Db::INT_TYPE,
		                                    Zend_Db::BIGINT_TYPE => Zend_Db::BIGINT_TYPE,
		                                    Zend_Db::FLOAT_TYPE  => Zend_Db::FLOAT_TYPE,
		                                    'INTEGER'            => Zend_Db::INT_TYPE,
		                                    'SMALLINT'           => Zend_Db::INT_TYPE,
		                                    'BIGINT'             => Zend_Db::BIGINT_TYPE,
		                                    'DECIMAL'            => Zend_Db::FLOAT_TYPE,
		                                    'DEC'                => Zend_Db::FLOAT_TYPE,
		                                    'REAL'               => Zend_Db::FLOAT_TYPE,
		                                    'NUMERIC'            => Zend_Db::FLOAT_TYPE,
		                                    'DOUBLE PRECISION'   => Zend_Db::FLOAT_TYPE,
		                                    'FLOAT'              => Zend_Db::FLOAT_TYPE
		                                    );
		/// <summary>
		/// PDO type.
		///            @var string
		/// </summary>
		protected var _pdoType = 'ibm';
		/// <summary>
		/// The IBM data server connected to
		///            @var string
		/// </summary>
		protected var _serverType = null;

		public Zend_Db_Adapter_Pdo_Ibm(){

		}

		~Zend_Db_Adapter_Pdo_Ibm(){

		}

		public override void Dispose(){

		}

		/// <summary>
		/// Checks required options
		/// </summary>
		/// <param>array $config</param>
		/// <param>void</param>
		/// <param name="config"></param>
		protected var _checkRequiredOptions(array config){

			return null;
		}

		/// <summary>
		/// Creates a PDO object and connects to the database.  The IBM data server is set.
		/// Current options are DB2 or IDS
		///            @todo also differentiate between z/OS and i/5
		///            @return void
		/// </summary>
		public var _connect(){

			return null;
		}

		/// <summary>
		/// Creates a PDO DSN for the adapter from $this->_config settings.
		/// </summary>
		/// string
		protected var _dsn(){

			return null;
		}

		/// <summary>
		/// Returns the column descriptions for a table.  The return value is an
		/// associative array keyed by the column name, as returned by the RDBMS.  The
		/// value of each array element is an associative array with the following keys:
		/// SCHEMA_NAME      => string; name of database or schema TABLE_NAME       =>
		/// string; COLUMN_NAME      => string; column name COLUMN_POSITION  => number;
		/// ordinal position of column in table DATA_TYPE        => string; SQL datatype
		/// name of column DEFAULT          => string; default expression of column, null
		/// if none NULLABLE         => boolean; true if column can have nulls LENGTH
		///    => number; length of CHAR/VARCHAR SCALE            => number; scale of
		/// NUMERIC/DECIMAL PRECISION        => number; precision of NUMERIC/DECIMAL
		/// UNSIGNED         => boolean; unsigned property of an integer type PRIMARY
		///   => boolean; true if column is part of the primary key PRIMARY_POSITION =>
		/// integer; position of column in primary key
		///            @todo Discover integer unsigned property.
		///            @param string $tableName
		///            @param string $schemaName OPTIONAL
		///            @return array
		/// </summary>
		/// <param name="tableName"></param>
		/// <param name="schemaName"></param>
		public var describeTable(var tableName, var schemaName){

			return null;
		}

		/// <summary>
		/// Retrieve server version in PHP style Pdo_Idm doesn't support getAttribute(PDO::
		/// ATTR_SERVER_VERSION)
		/// </summary>
		/// string
		public var getServerVersion(){

			return null;
		}

		/// <summary>
		/// Inserts a table row with specified data. Special handling for PDO_IBM remove
		/// empty slots
		/// </summary>
		/// <param>mixed $table The table to insert data into.</param>
		/// <param>array $bind Column-value pairs.</param>
		/// <param>int The number of affected rows.</param>
		/// <param name="table"></param>
		/// <param name="bind"></param>
		public var insert(var table, array bind){

			return null;
		}

		/// <summary>
		/// Gets the last ID generated automatically by an IDENTITY/AUTOINCREMENT column.
		/// </summary>
		/// <param>string $tableName OPTIONAL</param>
		/// <param>string $primaryKey OPTIONAL</param>
		/// <param>integer</param>
		/// <param name="tableName"></param>
		/// <param name="primaryKey"></param>
		public var lastInsertId(var tableName, var primaryKey){

			return null;
		}

		/// <summary>
		/// Return the most recent value from the specified sequence in the database.
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>integer</param>
		/// <param name="sequenceName"></param>
		public var lastSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Adds an adapter-specific LIMIT clause to the SELECT statement.
		/// </summary>
		/// <param>string $sql</param>
		/// <param>integer $count</param>
		/// <param>integer $offset OPTIONAL</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		/// <param name="count"></param>
		/// <param name="offset"></param>
		public var limit(var sql, var count, var offset){

			return null;
		}

		/// <summary>
		/// Returns a list of the tables in the database.
		/// </summary>
		/// array
		public var listTables(){

			return null;
		}

		/// <summary>
		/// Generate a new value from the specified sequence in the database, and return it.
		/// 
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>integer</param>
		/// <param name="sequenceName"></param>
		public var nextSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Prepares an SQL statement.
		/// </summary>
		/// <param>string $sql The SQL statement with placeholders.</param>
		/// <param>array $bind An array of data to bind to the placeholders.</param>
		/// <param>PDOStatement</param>
		/// <param name="sql"></param>
		public var prepare(var sql){

			return null;
		}

	}//end Zend_Db_Adapter_Pdo_Ibm

}//end namespace Pdo