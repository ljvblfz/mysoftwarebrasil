///////////////////////////////////////////////////////////
//  Zend_Db_Profiler_Query.cs
//  Implementation of the Class Zend_Db_Profiler_Query
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:27
//  Original author: alexis
///////////////////////////////////////////////////////////




namespace Zend.Db.Profiler {
	/// <summary>
	/// @category   Zend
	///        @package    Zend_Db
	///        @subpackage Profiler
	///        @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///        @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public class Zend_Db_Profiler_Query {

		/// <summary>
		/// @var array
		/// </summary>
		protected var _boundParams = array();
		/// <summary>
		/// Unix timestamp with microseconds when self::queryEnd() was called.
		///          @var integer
		/// </summary>
		protected var _endedMicrotime = null;
		/// <summary>
		/// SQL query string or user comment, set by $query argument in constructor.
		///          @var string
		/// </summary>
		protected var _query = '';
		/// <summary>
		/// One of the Zend_Db_Profiler constants for query type, set by $queryType
		/// argument in constructor.
		///          @var integer
		/// </summary>
		protected var _queryType = 0;
		/// <summary>
		/// Unix timestamp with microseconds when instantiated.
		///          @var float
		/// </summary>
		protected var _startedMicrotime = null;

		public Zend_Db_Profiler_Query(){

		}

		~Zend_Db_Profiler_Query(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Clone handler for the query object.
		/// </summary>
		/// void
		public var __clone(){

			return null;
		}

		/// <summary>
		/// Class constructor.  A query is about to be started, save the query text
		/// ($query) and its type (one of the Zend_Db_Profiler::* constants).
		/// </summary>
		/// <param>string  $query</param>
		/// <param>integer $queryType</param>
		/// <param>void</param>
		/// <param name="query"></param>
		/// <param name="queryType"></param>
		public var __construct(var query, var queryType){

			return null;
		}

		/// <summary>
		/// @param string $param
		///          @param mixed $variable
		///          @return void
		/// </summary>
		/// <param name="param"></param>
		/// <param name="variable"></param>
		public var bindParam(var param, var variable){

			return null;
		}

		/// <summary>
		/// @param array $param
		///          @return void
		/// </summary>
		/// <param name="params"></param>
		public var bindParams(array params){

			return null;
		}

		/// <summary>
		/// Ends the query and records the time so that the elapsed time can be determined
		/// later.
		/// </summary>
		/// void
		public var end(){

			return null;
		}

		/// <summary>
		/// Get the elapsed time (in seconds) that the query ran. If the query has not yet
		/// ended, false is returned.
		/// </summary>
		/// float|false
		public var getElapsedSecs(){

			return null;
		}

		/// <summary>
		/// Get the original SQL text of the query.
		/// </summary>
		/// string
		public var getQuery(){

			return null;
		}

		/// <summary>
		/// @return array
		/// </summary>
		public var getQueryParams(){

			return null;
		}

		/// <summary>
		/// Get the type of this query (one of the Zend_Db_Profiler::* constants)
		/// </summary>
		/// integer
		public var getQueryType(){

			return null;
		}

		/// <summary>
		/// Returns true if and only if the query has ended.
		/// </summary>
		/// boolean
		public var hasEnded(){

			return null;
		}

		/// <summary>
		/// Starts the elapsed time click ticking. This can be called subsequent to object
		/// creation, to restart the clock.  For instance, this is useful right before
		/// executing a prepared query.
		/// </summary>
		/// void
		public var start(){

			return null;
		}

	}//end Zend_Db_Profiler_Query

}//end namespace Profiler