///////////////////////////////////////////////////////////
//  Zend_Db_Profiler.cs
//  Implementation of the Class Zend_Db_Profiler
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:53
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Profiler;
namespace Zend.Db {
	/// <summary>
	/// @category   Zend
	///      @package    Zend_Db
	///      @subpackage Profiler
	///      @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.
	/// zend.com)
	///      @license    http://framework.zend.com/license/new-bsd     New BSD License
	/// </summary>
	public class Zend_Db_Profiler {

		/// <summary>
		/// Stores enabled state of the profiler.  If set to False, calls to queryStart()
		/// will simply be ignored.
		///        @var boolean
		/// </summary>
		protected var _enabled = false;
		/// <summary>
		/// Stores the number of seconds to filter.  NULL if filtering by time is disabled.
		/// If an integer is stored here, profiles whose elapsed time is less than this
		/// value in seconds will be unset from the self::$_queryProfiles array.
		///        @var integer
		/// </summary>
		protected var _filterElapsedSecs = null;
		/// <summary>
		/// Logical OR of any of the filter constants.  NULL if filtering by query type is
		/// disable.  If an integer is stored here, it is the logical OR of any of the
		/// query type constants.  When the query ends, if it is not one of the types
		/// specified, it will be unset from the self::$_queryProfiles array.
		///        @var integer
		/// </summary>
		protected var _filterTypes = null;
		/// <summary>
		/// Array of Zend_Db_Profiler_Query objects.
		///        @var array
		/// </summary>
		protected var _queryProfiles = array();
		/// <summary>
		/// A connection operation or selecting a database.
		/// </summary>
		private readonly var CONNECT = 1;
		/// <summary>
		/// An operation related to deleting data in the database, such as SQL's DELETE.
		/// </summary>
		private readonly var DELETE = 16;
		/// <summary>
		/// Inform that a query is ignored (in case of filtering)
		/// </summary>
		private readonly var IGNORED = 'ignored';
		/// <summary>
		/// Adding new data to the database, such as SQL's INSERT.
		/// </summary>
		private readonly var INSERT = 4;
		/// <summary>
		/// Any general database query that does not fit into the other constants.
		/// </summary>
		private readonly var QUERY = 2;
		/// <summary>
		/// Retrieving information from the database, such as SQL's SELECT.
		/// </summary>
		private readonly var SELECT = 32;
		/// <summary>
		/// Inform that a query is stored (in case of filtering)
		/// </summary>
		private readonly var STORED = 'stored';
		/// <summary>
		/// Transactional operation, such as start transaction, commit, or rollback.
		/// </summary>
		private readonly var TRANSACTION = 64;
		/// <summary>
		/// Updating existing information in the database, such as SQL's UPDATE.
		/// </summary>
		private readonly var UPDATE = 8;

		public Zend_Db_Profiler(){

		}

		~Zend_Db_Profiler(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Class constructor.  The profiler is disabled by default unless it is
		/// specifically enabled by passing in $enabled here or calling setEnabled().
		/// </summary>
		/// <param>boolean $enabled</param>
		/// <param>void</param>
		/// <param name="enabled"></param>
		public var __construct(var enabled){

			return null;
		}

		/// <summary>
		/// Clears the history of any past query profiles.  This is relentless and will
		/// even clear queries that were started and may not have been marked as ended.
		/// </summary>
		/// Zend_Db_Profiler Provides a fluent interface
		public var clear(){

			return null;
		}

		public var CONNECT{
			get{
				return CONNECT;
			}
			set{
				CONNECT = value;
			}
		}

		public var DELETE{
			get{
				return DELETE;
			}
			set{
				DELETE = value;
			}
		}

		/// <summary>
		/// Get the current state of enable.  If True is returned, the profiler is enabled.
		/// 
		/// </summary>
		/// boolean
		public var getEnabled(){

			return null;
		}

		/// <summary>
		/// Returns the minimum number of seconds for saving query profiles, or null if
		/// query profiles are saved regardless of elapsed time.
		/// </summary>
		/// integer|null
		public var getFilterElapsedSecs(){

			return null;
		}

		/// <summary>
		/// Returns the types of query profiles saved, or null if queries are saved
		/// regardless of their types.
		/// </summary>
		/// integer|null
		/// <see>Zend_Db_Profiler::setFilterQueryType()</see>
		public var getFilterQueryType(){

			return null;
		}

		/// <summary>
		/// Get the Zend_Db_Profiler_Query object for the last query that was run,
		/// regardless if it has ended or not.  If the query has not ended, its end time
		/// will be null.  If no queries have been profiled, false is returned.
		/// </summary>
		/// Zend_Db_Profiler_Query|false
		public var getLastQueryProfile(){

			return null;
		}

		/// <summary>
		/// Get a profile for a query.  Pass it the same handle that was returned by
		/// queryStart() and it will return a Zend_Db_Profiler_Query object.
		/// </summary>
		/// <param>integer $queryId</param>
		/// <param>Zend_Db_Profiler_Query</param>
		/// <param name="queryId"></param>
		public var getQueryProfile(var queryId){

			return null;
		}

		/// <summary>
		/// Get an array of query profiles (Zend_Db_Profiler_Query objects).  If $queryType
		/// is set to one of the Zend_Db_Profiler::* constants then only queries of that
		/// type will be returned.  Normally, queries that have not yet ended will not be
		/// returned unless $showUnfinished is set to True.  If no queries were found,
		/// False is returned. The returned array is indexed by the query profile handles.
		/// </summary>
		/// <param>integer $queryType</param>
		/// <param>boolean $showUnfinished</param>
		/// <param>array|false</param>
		/// <param name="queryType"></param>
		/// <param name="showUnfinished"></param>
		public var getQueryProfiles(var queryType, var showUnfinished){

			return null;
		}

		/// <summary>
		/// Get the total elapsed time (in seconds) of all of the profiled queries. Only
		/// queries that have ended will be counted.  If $queryType is set to one or more
		/// of the Zend_Db_Profiler::* constants, the elapsed time will be calculated only
		/// for queries of the given type(s).
		/// </summary>
		/// <param>integer $queryType OPTIONAL</param>
		/// <param>float</param>
		/// <param name="queryType"></param>
		public var getTotalElapsedSecs(var queryType){

			return null;
		}

		/// <summary>
		/// Get the total number of queries that have been profiled.  Only queries that
		/// have ended will be counted.  If $queryType is set to one of the
		/// Zend_Db_Profiler::* constants, only queries of that type will be counted.
		/// </summary>
		/// <param>integer $queryType OPTIONAL</param>
		/// <param>integer</param>
		/// <param name="queryType"></param>
		public var getTotalNumQueries(var queryType){

			return null;
		}

		public var IGNORED{
			get{
				return IGNORED;
			}
			set{
				IGNORED = value;
			}
		}

		public var INSERT{
			get{
				return INSERT;
			}
			set{
				INSERT = value;
			}
		}

		public var QUERY{
			get{
				return QUERY;
			}
			set{
				QUERY = value;
			}
		}

		/// <summary>
		/// @param  integer $queryId
		///        @return integer or null
		/// </summary>
		/// <param name="query"></param>
		public var queryClone(Zend_Db_Profiler_Query query){

			return null;
		}

		/// <summary>
		/// Ends a query.  Pass it the handle that was returned by queryStart(). This will
		/// mark the query as ended and save the time.
		/// </summary>
		/// <param>integer $queryId</param>
		/// <param>void</param>
		/// <param name="queryId"></param>
		public var queryEnd(var queryId){

			return null;
		}

		/// <summary>
		/// Starts a query.  Creates a new query profile object (Zend_Db_Profiler_Query)
		/// and returns the "query profiler handle".  Run the query, then call queryEnd()
		/// and pass it this handle to make the query as ended and record the time.  If the
		/// profiler is not enabled, this takes no action and immediately returns null.
		/// </summary>
		/// <param>string  $queryText   SQL statement</param>
		/// <param>integer $queryType   OPTIONAL Type of query, one of the Zend_Db_Profiler:
		/// :* constants</param>
		/// <param>integer|null</param>
		/// <param name="queryText"></param>
		/// <param name="queryType"></param>
		public var queryStart(var queryText, var queryType){

			return null;
		}

		public var SELECT{
			get{
				return SELECT;
			}
			set{
				SELECT = value;
			}
		}

		/// <summary>
		/// Enable or disable the profiler.  If $enable is false, the profiler is disabled
		/// and will not log any queries sent to it.
		/// </summary>
		/// <param>boolean $enable</param>
		/// <param>Zend_Db_Profiler Provides a fluent interface</param>
		/// <param name="enable"></param>
		public var setEnabled(var enable){

			return null;
		}

		/// <summary>
		/// Sets a minimum number of seconds for saving query profiles.  If this is set,
		/// only those queries whose elapsed time is equal or greater than $minimumSeconds
		/// will be saved.  To save all queries regardless of elapsed time, set
		/// $minimumSeconds to null.
		/// </summary>
		/// <param>integer $minimumSeconds OPTIONAL</param>
		/// <param>Zend_Db_Profiler Provides a fluent interface</param>
		/// <param name="minimumSeconds"></param>
		public var setFilterElapsedSecs(var minimumSeconds){

			return null;
		}

		/// <summary>
		/// Sets the types of query profiles to save.  Set $queryType to one of the
		/// Zend_Db_Profiler::* constants to only save profiles for that type of query.  To
		/// save more than one type, logical OR them together.  To save all queries
		/// regardless of type, set $queryType to null.
		/// </summary>
		/// <param>integer $queryTypes OPTIONAL</param>
		/// <param>Zend_Db_Profiler Provides a fluent interface</param>
		/// <param name="queryTypes"></param>
		public var setFilterQueryType(var queryTypes){

			return null;
		}

		public var STORED{
			get{
				return STORED;
			}
			set{
				STORED = value;
			}
		}

		public var TRANSACTION{
			get{
				return TRANSACTION;
			}
			set{
				TRANSACTION = value;
			}
		}

		public var UPDATE{
			get{
				return UPDATE;
			}
			set{
				UPDATE = value;
			}
		}

	}//end Zend_Db_Profiler

}//end namespace Db