///////////////////////////////////////////////////////////
//  Zend_Config.cs
//  Implementation of the Class Zend_Config
//  Generated by Enterprise Architect
//  Created on:      07-jun-2011 19:58:31
//  Original author: alexis
///////////////////////////////////////////////////////////




namespace NZend
{
	/// <summary>
	/// @category   Zend
	/// @package    Zend_Config
	/// @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.
	/// @license    http://framework.zend.com/license/new-bsd     New BSD License
	/// </summary>
	public class Zend_Config {

		/// <summary>
		/// Whether in-memory modifications to configuration data are allowed
		/// @var boolean
		/// </summary>
        protected bool _allowModifications;

		/// <summary>
		/// Number of elements in configuration data
		/// @var integer
		/// </summary>
		protected int _count;

		/// <summary>
		/// Contains array of configuration data
		/// @var array
		/// </summary>
        protected object[] _data;

		/// <summary>
		/// This is used to track section inheritance. The keys are names of sections that
		/// extend other sections, and the values are the extended sections.
		/// @var array
		/// </summary>
        protected object[] _extends = array();

		/// <summary>
		/// Iteration index
		/// @var integer
		/// </summary>
		protected int _index;

		/// <summary>
		/// Contains which config file sections were loaded. This is null if all sections
		/// were loaded, a string name if one section is loaded and an array of string
		/// names if multiple sections were loaded.
		/// @var mixed
		/// </summary>
        protected object _loadedSection;

		/// <summary>
		/// Load file error string.  Is null if there was no error while file loading
		/// @var string
		/// </summary>
        protected string _loadFileErrorStr = null;

		/// <summary>
		/// Used when unsetting values during iteration to ensure we do not skip the next
		/// element
		/// @var boolean
		/// </summary>
		protected bool _skipNextIteration;

		/// <summary>
		/// Deep clone of this instance to ensure that nested Zend_Configs are also cloned.
		/// 
		/// </summary>
		/// void
		public Zend_Config __clone(){

			return null;
		}

		/// <summary>
		/// Zend_Config provides a property based interface to an array. The data are read-
		/// only unless $allowModifications is set to true on construction.  Zend_Config
		/// also implements Countable and Iterator to facilitate easy access to the data.
		/// </summary>
		/// <param>boolean $allowModifications</param>
		/// <param>void</param>
		/// <param name="array">$array</param>
		/// <param name="allowModifications"></param>
		public Zend_Config(object[] array, bool allowModifications){


		}

		/// <summary>
		/// Magic function so that $obj->value will work.
		/// </summary>
		/// <param>string $name</param>
		/// <param>mixed</param>
		/// <param name="name"></param>
		public object __get(object name){

			return null;
		}

		/// <summary>
		/// Support isset() overloading on PHP 5.1
		/// </summary>
		/// <param>string $name</param>
		/// <param>boolean</param>
		/// <param name="name"></param>
		public object __isset(object name){

			return null;
		}

		/// <summary>
		/// Only allow setting of a property if $allowModifications was set to true on
		/// construction. Otherwise, throw an exception.
		/// </summary>
		/// <param>string $name</param>
		/// <param>mixed  $value</param>
		/// <param>void</param>
		/// <param name="name"></param>
		/// <param name="value"></param>
		public object __set(object name, object value){

			return null;
		}

		/// <summary>
		/// Support unset() overloading on PHP 5.1
		/// </summary>
		/// <param>string $name</param>
		/// <param>void</param>
		/// <param name="name"></param>
		public object __unset(object name){

			return null;
		}

		/// <summary>
		/// Merge two arrays recursively, overwriting keys of the same name in $firstArray
		/// with the value in $secondArray.
		/// </summary>
		/// <param>mixed $firstArray  First array</param>
		/// <param>mixed $secondArray Second array to merge into first array</param>
		/// <param>array</param>
		/// <param name="firstArray"></param>
		/// <param name="secondArray"></param>
		protected object _arrayMergeRecursive(object[] firstArray, object[] secondArray){

			return null;
		}

		/// <summary>
		/// Throws an exception if $extendingSection may not extend $extendedSection, and
		/// tracks the section extension if it is valid.
		/// </summary>
		/// <param>string $extendingSection</param>
		/// <param>string $extendedSection</param>
		/// <param>void</param>
		/// <param name="extendingSection"></param>
		/// <param name="extendedSection"></param>
		protected object _assertValidExtend(object extendingSection, object extendedSection){

			return null;
		}

		/// <summary>
		/// Handle any errors from simplexml_load_file or parse_ini_file
		/// </summary>
		/// <param>integer $errno</param>
		/// <param>string $errstr</param>
		/// <param>string $errfile</param>
		/// <param>integer $errline</param>
		/// <param name="errno"></param>
		/// <param name="errstr"></param>
		/// <param name="errfile"></param>
		/// <param name="errline"></param>
		protected object _loadFileErrorHandler(object errno, object errstr, object errfile, object errline){

			return null;
		}

		/// <summary>
		/// Returns true if all sections were loaded
		/// </summary>
		/// boolean
		public object areAllSectionsLoaded(){

			return null;
		}

		/// <summary>
		/// Defined by Countable interface
		/// </summary>
		/// int
		public int count(){

			return 0;
		}

		/// <summary>
		/// Defined by Iterator interface
		/// </summary>
		/// mixed
		public object current(){

			return null;
		}

		/// <summary>
		/// Retrieve a value and return $default if there is no element set.
		/// </summary>
		/// <param>string $name</param>
		/// <param>mixed $default</param>
		/// <param>mixed</param>
		/// <param name="name"></param>
		/// <param name="default"></param>
		public object get(object name, object _default){

			return null;
		}

		/// <summary>
		/// Get the current extends
		/// </summary>
		/// array
        public object[] getExtends()
        {

			return null;
		}

		/// <summary>
		/// Returns the section name(s) loaded.
		/// </summary>
		/// mixed
        public object getSectionName()
        {

			return null;
		}

		/// <summary>
		/// Defined by Iterator interface
		/// </summary>
		/// mixed
        public object key()
        {

			return null;
		}

		/// <summary>
		/// Merge another Zend_Config with this one. The items in $merge will override the
		/// same named items in the current config.
		/// </summary>
		/// <param>Zend_Config $merge</param>
		/// <param>Zend_Config</param>
		/// <param name="merge"></param>
        public Zend_Config merge(Zend_Config merge)
        {

			return null;
		}

		/// <summary>
		/// Defined by Iterator interface
		/// </summary>
		public object next(){

			return null;
		}

		/// <summary>
		/// Returns if this Zend_Config object is read only or not.
		/// </summary>
		/// boolean
        public object readOnly()
        {

			return null;
		}

		/// <summary>
		/// Defined by Iterator interface
		/// </summary>
        public object rewind()
        {

			return null;
		}

		/// <summary>
		/// Set an extend for Zend_Config_Writer
		/// </summary>
		/// <param>string $extendingSection</param>
		/// <param>string $extendedSection</param>
		/// <param>void</param>
		/// <param name="extendingSection"></param>
		/// <param name="extendedSection"></param>
        public object setExtend(object extendingSection, object extendedSection)
        {

			return null;
		}

		/// <summary>
		/// Prevent any more modifications being made to this instance. Useful after
		/// merge() has been used to merge multiple Zend_Config objects into one object
		/// which should then not be modified again.
		/// </summary>
        public object setReadOnly()
        {

			return null;
		}

		/// <summary>
		/// Return an associative array of the stored data.
		/// </summary>
		/// array
        public object[] toArray()
        {

			return null;
		}

		/// <summary>
		/// Defined by Iterator interface
		/// </summary>
		/// boolean
		public bool valid(){

			return false;
		}

	}//end Zend_Config

}//end namespace Zend