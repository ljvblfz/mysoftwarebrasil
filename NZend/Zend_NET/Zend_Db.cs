///////////////////////////////////////////////////////////
//  Zend_Db.cs
//  Implementation of the Class Zend_Db
//  Generated by Enterprise Architect
//  Created on:      07-jun-2011 19:42:45
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Adapter;
namespace NZend
{

	/// <summary>
	/// Classe para conexão com bancos de dados SQL e executar operações comuns.
	/// @category   Zend
	/// @package    Zend_Db
	/// </summary>
	public class Zend_Db {

		/// <summary>
		/// Use the ALLOW_SERIALIZATION constant in the config of a Zend_Db_Adapter.
		/// </summary>
		public readonly string ALLOW_SERIALIZATION = "allowSerialization";

		/// <summary>
		/// PDO valores constantes descobertas por esse resultado script:  $list = array(
		/// "PARAM_BOOL", "PARAM_null", "PARAM_INT", "PARAM_STR", "PARAM_LOB", "PARAM_STMT",
		/// "PARAM_INPUT_OUTPUT", "FETCH_LAZY", "FETCH_ASSOC", "FETCH_NUM", "FETCH_BOTH",
		/// "FETCH_OBJ", "FETCH_BOUND", "FETCH_COLUMN", "FETCH_CLASS", "FETCH_INTO",
		/// "FETCH_FUNC", "FETCH_GROUP", "FETCH_UNIQUE", "FETCH_CLASSTYPE",
		/// "FETCH_SERIALIZE", "FETCH_NAMED", "ATTR_AUTOCOMMIT", "ATTR_PREFETCH",
		/// "ATTR_TIMEOUT", "ATTR_ERRMODE", "ATTR_SERVER_VERSION", "ATTR_CLIENT_VERSION",
		/// "ATTR_SERVER_INFO", "ATTR_CONNECTION_STATUS", "ATTR_CASE", "ATTR_CURSOR_NAME",
		/// "ATTR_CURSOR", "ATTR_ORACLE_nullS", "ATTR_PERSISTENT", "ATTR_STATEMENT_CLASS",
		/// "ATTR_FETCH_TABLE_NAMES", "ATTR_FETCH_CATALOG_NAMES", "ATTR_DRIVER_NAME",
		/// "ATTR_STRINGIFY_FETCHES", "ATTR_MAX_COLUMN_LEN", "ERRMODE_SILENT",
		/// "ERRMODE_WARNING", "ERRMODE_EXCEPTION", "CASE_NATURAL", "CASE_LOWER",
		/// "CASE_UPPER", "null_NATURAL", "null_EMPTY_STRING", "null_TO_STRING", "ERR_NONE",
		/// "FETCH_ORI_NEXT", "FETCH_ORI_PRIOR", "FETCH_ORI_FIRST", "FETCH_ORI_LAST",
		/// "FETCH_ORI_ABS", "FETCH_ORI_REL", "CURSOR_FWDONLY", "CURSOR_SCROLL",
		/// "ERR_CANT_MAP", "ERR_SYNTAX", "ERR_CONSTRAINT", "ERR_NOT_FOUND",
		/// "ERR_ALREADY_EXISTS", "ERR_NOT_IMPLEMENTED", "ERR_MISMATCH", "ERR_TRUNCATED",
		/// "ERR_DISCONNECTED", "ERR_NO_PERM", );  $const = array(); foreach ($list as
		/// $name) { $const[$name] = constant("PDO::$name"); } var_export($const);
		/// </summary>
		public readonly int ATTR_AUTOCOMMIT = 0;
		public readonly int ATTR_CASE = 8;
		public readonly int ATTR_CLIENT_VERSION = 5;
		public readonly int ATTR_CONNECTION_STATUS = 7;
		public readonly int ATTR_CURSOR = 10;
		public readonly int ATTR_CURSOR_NAME = 9;
		public readonly int ATTR_DRIVER_NAME = 16;
		public readonly int ATTR_ERRMODE = 3;
		public readonly int ATTR_FETCH_CATALOG_NAMES = 15;
		public readonly int ATTR_FETCH_TABLE_NAMES = 14;
		public readonly int ATTR_MAX_COLUMN_LEN = 18;
		public readonly int ATTR_ORACLE_nullS = 11;
		public readonly int ATTR_PERSISTENT = 12;
		public readonly int ATTR_PREFETCH = 1;
		public readonly int ATTR_SERVER_INFO = 6;
		public readonly int ATTR_SERVER_VERSION = 4;
		public readonly int ATTR_STATEMENT_CLASS = 13;
		public readonly int ATTR_STRINGIFY_FETCHES = 17;
		public readonly int ATTR_TIMEOUT = 2;

		/// <summary>
		/// Use the AUTO_QUOTE_IDENTIFIERS constant in the config of a Zend_Db_Adapter.
		/// </summary>
		public readonly string AUTO_QUOTE_IDENTIFIERS = "autoQuoteIdentifiers";

		/// <summary>
		/// Use the AUTO_RECONNECT_ON_UNSERIALIZE constant in the config of a
		/// Zend_Db_Adapter.
		/// </summary>
		public readonly string AUTO_RECONNECT_ON_UNSERIALIZE = "autoReconnectOnUnserialize";
		public readonly int BIGINT_TYPE = 1;

		/// <summary>
		/// Use the CASE_FOLDING constant in the config of a Zend_Db_Adapter.
		/// </summary>
		public readonly string CASE_FOLDING = "caseFolding";
		public readonly int CASE_LOWER = 2;
		public readonly int CASE_NATURAL = 0;
		public readonly int CASE_UPPER = 1;
		public readonly int CURSOR_FWDONLY = 0;
		public readonly int CURSOR_SCROLL = 1;
		public readonly string ERR_ALREADY_EXISTS = null;
		public readonly string ERR_CANT_MAP = null;
		public readonly string ERR_CONSTRAINT = null;
		public readonly string ERR_DISCONNECTED = null;
		public readonly string ERR_MISMATCH = null;
		public readonly string ERR_NO_PERM = null;
		public readonly string ERR_NONE = "00000";
		public readonly string ERR_NOT_FOUND = null;
		public readonly string ERR_NOT_IMPLEMENTED = null;
		public readonly string ERR_SYNTAX = null;
		public readonly string ERR_TRUNCATED = null;
		public readonly int ERRMODE_EXCEPTION = 2;
		public readonly int ERRMODE_SILENT = 0;
		public readonly int ERRMODE_WARNING = 1;
		public readonly int FETCH_ASSOC = 2;
		public readonly int FETCH_BOTH = 4;
		public readonly int FETCH_BOUND = 6;
		public readonly int FETCH_CLASS = 8;
		public readonly int FETCH_CLASSTYPE = 262144;
		public readonly int FETCH_COLUMN = 7;
		public readonly int FETCH_FUNC = 10;
		public readonly int FETCH_GROUP = 65536;
		public readonly int FETCH_INTO = 9;
		public readonly int FETCH_LAZY = 1;
		public readonly int FETCH_NAMED = 11;
		public readonly int FETCH_NUM = 3;
		public readonly int FETCH_OBJ = 5;
		public readonly int FETCH_ORI_ABS = 4;
		public readonly int FETCH_ORI_FIRST = 2;
		public readonly int FETCH_ORI_LAST = 3;
		public readonly int FETCH_ORI_NEXT = 0;
		public readonly int FETCH_ORI_PRIOR = 1;
		public readonly int FETCH_ORI_REL = 5;
		public readonly int FETCH_SERIALIZE = 524288;
		public readonly int FETCH_UNIQUE = 196608;
		public readonly int FLOAT_TYPE = 2;
		/// <summary>
		/// Use the INT_TYPE, BIGINT_TYPE, and FLOAT_TYPE with the quote() method.
		/// </summary>
		public readonly int INT_TYPE = 0;
		public readonly int null_EMPTY_STRING = 1;
		public readonly int null_NATURAL = 0;
		public readonly string null_TO_STRING = null;
		public readonly int PARAM_BOOL = 5;
		public readonly int PARAM_INPUT_OUTPUT = -2147483648;
		public readonly int PARAM_INT = 1;
		public readonly int PARAM_LOB = 3;
		public readonly int PARAM_null = 0;
		public readonly int PARAM_STMT = 4;
		public readonly int PARAM_STR = 2;
		/// <summary>
		/// Use the PROFILER constant in the config of a Zend_Db_Adapter.
		/// </summary>
		public readonly string PROFILER = "profiler";

		public Zend_Db(){

		}


		public virtual void Dispose(){

		}

		/// <summary>
		/// Factory / para as classes Zend_Db_Adapter_Abstract. O primeiro argumento pode ser uma string
		/// contendo a base do nome da classe do adaptador, por exemplo, "Mysqli"corresponde a
		/// classe Zend_Db_Adapter_Mysqli. Este nome está insensíveis ao caso, mas é
		/// não é o ideal para contar com esse comportamento. Se a sua classe é chamada
		/// "My_Company_Pdo_Mysql", onde "My_Company"é o espaço e "pdo_mysql é
		/// o nome do adaptador, o melhor é usar o nome exatamente como ele é definido no
		/// classe. Isto irá garantir um uso apropriado da fábrica API. O primeiro argumento pode
		/// em alternativa, ser objeto de Zend_Config tipo. O adaptador é o nome da classe base
		/// ler a propriedade "adaptador". O adaptador de parâmetros de configuração são lidos do
		/// a propriedade "params". O segundo argumento é opcional e pode ser associativa
		/// array de pares chave-valor. Esta é utilizada como argumento para o adaptador
		/// construtor. Se o primeiro argumento é de Zend_Config tipo, é assumido que
		/// conter todos os parâmetros, eo segundo argumento é ignorado.
		/// </summary>
		/// <param> mixed $ adaptador String nome da classe do adaptador de base, ou objeto Zend_Config.
		/// </ param>
		/// <param> mixed $ config OPCIONAL, um array ou objeto Zend_Config com adaptador
		/// parâmetros. </ param>
		/// <param> Zend_Db_Adapter_Abstract <param /??>
		/// <param name="adapter"> </param>
		/// <param name="config"> </param>
        public static var factory(Zend_Db_Adapter_Abstract adapter, Zend_Config config)
        {

			return null;
		}

	}//end Zend_Db

}//end namespace Zend