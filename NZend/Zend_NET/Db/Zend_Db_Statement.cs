///////////////////////////////////////////////////////////
//  Zend_Db_Statement.cs
//  Implementation of the Class Zend_Db_Statement
//  Generated by Enterprise Architect
//  Created on:      07-jun-2011 20:06:46
//  Original author: alexis
///////////////////////////////////////////////////////////




namespace Zend.Db {
	/// <summary>
	/// Abstract class to emulate a PDOStatement for native database adapters.
	///      @category   Zend
	///      @package    Zend_Db
	///      @subpackage Statement
	///      @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.
	/// zend.com)
	///      @license    http://framework.zend.com/license/new-bsd     New BSD License
	/// </summary>
	public abstract class Zend_Db_Statement {

		/// <summary>
		/// @var Zend_Db_Adapter_Abstract
		/// </summary>
		protected var _adapter = null;
		/// <summary>
		/// Attributes.
		///        @var array
		/// </summary>
		protected var _attribute = array();
		/// <summary>
		/// Column result bindings.
		///        @var array
		/// </summary>
		protected var _bindColumn = array();
		/// <summary>
		/// Query parameter bindings; covers bindParam() and bindValue().
		///        @var array
		/// </summary>
		protected var _bindParam = array();
		/// <summary>
		/// The current fetch mode.
		///        @var integer
		/// </summary>
		protected var _fetchMode = Zend_Db::FETCH_ASSOC;
		/// <summary>
		/// @var Zend_Db_Profiler_Query
		/// </summary>
		protected var _queryId = null;
		/// <summary>
		/// Parameter placeholders in the SQL string by position in the split array.
		///        @var array
		/// </summary>
		protected var _sqlParam = array();
		/// <summary>
		/// SQL string split into an array at placeholders.
		///        @var array
		/// </summary>
		protected var _sqlSplit = array();
		/// <summary>
		/// @var resource|object The driver level statement object/resource
		/// </summary>
		protected var _stmt = null;

		public Zend_Db_Statement(){

		}

		~Zend_Db_Statement(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Constructor for a statement.
		/// </summary>
		/// <param>Zend_Db_Adapter_Abstract $adapter</param>
		/// <param>mixed $sql Either a string or Zend_Db_Select.</param>
		/// <param name="adapter"></param>
		/// <param name="sql"></param>
		public var __construct(var adapter, var sql){

			return null;
		}

		/// <summary>
		/// Helper function to map retrieved row to bound column variables
		/// </summary>
		/// <param>array $row</param>
		/// <param>bool True</param>
		/// <param name="row"></param>
		public var _fetchBound(var row){

			return null;
		}

		/// <summary>
		/// @param string $sql
		///        @return void
		/// </summary>
		/// <param name="sql"></param>
		protected var _parseParameters(var sql){

			return null;
		}

		/// <summary>
		/// Internal method called by abstract statment constructor to setup the driver
		/// level statement
		/// </summary>
		/// void
		/// <param name="sql"></param>
		protected var _prepare(var sql){

			return null;
		}

		/// <summary>
		/// Remove parts of a SQL string that contain quoted strings of values or
		/// identifiers.
		/// </summary>
		/// <param>string $sql</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		protected var _stripQuoted(var sql){

			return null;
		}

		/// <summary>
		/// Bind a column of the statement result set to a PHP variable.
		/// </summary>
		/// <param>string $column Name the column in the result set, either by position or
		/// by name.</param>
		/// <param>mixed  $param  Reference to the PHP variable containing the value.
		/// </param>
		/// <param>mixed  $type   OPTIONAL</param>
		/// <param>bool</param>
		/// <param name="column"></param>
		/// <param name="param"></param>
		/// <param name="type"></param>
		public var bindColumn(var column, ref var param, var type){

			return null;
		}

		/// <summary>
		/// Binds a parameter to the specified variable name.
		/// </summary>
		/// <param>mixed $parameter Name the parameter, either integer or string.</param>
		/// <param>mixed $variable  Reference to PHP variable containing the value.
		/// </param>
		/// <param>mixed $type      OPTIONAL Datatype of SQL parameter.</param>
		/// <param>mixed $length    OPTIONAL Length of SQL parameter.</param>
		/// <param>mixed $options   OPTIONAL Other options.</param>
		/// <param>bool</param>
		/// <param name="parameter"></param>
		/// <param name="variable"></param>
		/// <param name="type"></param>
		/// <param name="length"></param>
		/// <param name="options"></param>
		public var bindParam(var parameter, ref var variable, var type, var length, var options){

			return null;
		}

		/// <summary>
		/// Binds a value to a parameter.
		/// </summary>
		/// <param>mixed $parameter Name the parameter, either integer or string.</param>
		/// <param>mixed $value     Scalar value to bind to the parameter.</param>
		/// <param>mixed $type      OPTIONAL Datatype of the parameter.</param>
		/// <param>bool</param>
		/// <param name="parameter"></param>
		/// <param name="value"></param>
		/// <param name="type"></param>
		public var bindValue(var parameter, var value, var type){

			return null;
		}

		/// <summary>
		/// Closes the cursor, allowing the statement to be executed again.
		/// </summary>
		/// bool
		public var closeCursor(){

			return null;
		}

		/// <summary>
		/// Returns the number of columns in the result set. Returns null if the statement
		/// has no result set metadata.
		/// </summary>
		/// int The number of columns.
		public var columnCount(){

			return null;
		}

		/// <summary>
		/// Retrieves the error code, if any, associated with the last operation on the
		/// statement handle.
		/// </summary>
		/// string error code.
		public var errorCode(){

			return null;
		}

		/// <summary>
		/// Retrieves an array of error information, if any, associated with the last
		/// operation on the statement handle.
		/// </summary>
		/// array
		public var errorInfo(){

			return null;
		}

		/// <summary>
		/// Executes a prepared statement.
		/// </summary>
		/// <param>array $params OPTIONAL Values to bind to parameter placeholders.
		/// </param>
		/// <param>bool</param>
		/// <param name="params"></param>
		public var execute(array params){

			return null;
		}

		/// <summary>
		/// Fetches a row from the result set.
		/// </summary>
		/// <param>int $style  OPTIONAL Fetch mode for this fetch operation.</param>
		/// <param>int $cursor OPTIONAL Absolute, relative, or other.</param>
		/// <param>int $offset OPTIONAL Number for absolute or relative cursors.</param>
		/// <param>mixed Array, object, or scalar depending on fetch mode.</param>
		/// <param name="style"></param>
		/// <param name="cursor"></param>
		/// <param name="offset"></param>
		public var fetch(var style, var cursor, var offset){

			return null;
		}

		/// <summary>
		/// Returns an array containing all of the result set rows.
		/// </summary>
		/// <param>int $style OPTIONAL Fetch mode.</param>
		/// <param>int $col   OPTIONAL Column number, if fetch mode is by column.</param>
		/// <param>array Collection of rows, each in a format by the fetch mode.</param>
		/// <param name="style"></param>
		/// <param name="col"></param>
		public var fetchAll(var style, var col){

			return null;
		}

		/// <summary>
		/// Returns a single column from the next row of a result set.
		/// </summary>
		/// <param>int $col OPTIONAL Position of the column to fetch.</param>
		/// <param>string One value from the next row of result set, or false.</param>
		/// <param name="col"></param>
		public var fetchColumn(var col){

			return null;
		}

		/// <summary>
		/// Fetches the next row and returns it as an object.
		/// </summary>
		/// <param>string $class  OPTIONAL Name of the class to create.</param>
		/// <param>array  $config OPTIONAL Constructor arguments for the class.</param>
		/// <param>mixed One object instance of the specified class, or false.</param>
		/// <param name="class"></param>
		/// <param name="config"></param>
		public var fetchObject(var class, array config){

			return null;
		}

		/// <summary>
		/// Gets the Zend_Db_Adapter_Abstract for this particular Zend_Db_Statement object.
		/// 
		/// </summary>
		/// Zend_Db_Adapter_Abstract
		public var getAdapter(){

			return null;
		}

		/// <summary>
		/// Retrieve a statement attribute.
		/// </summary>
		/// <param>string $key Attribute name.</param>
		/// <param>mixed      Attribute value.</param>
		/// <param name="key"></param>
		public var getAttribute(var key){

			return null;
		}

		/// <summary>
		/// Gets the resource or object setup by the _parse
		/// </summary>
		/// unknown_type
		public var getDriverStatement(){

			return null;
		}

		/// <summary>
		/// Retrieves the next rowset (result set) for a SQL statement that has multiple
		/// result sets.  An example is a stored procedure that returns the results of
		/// multiple queries.
		/// </summary>
		/// bool
		public var nextRowset(){

			return null;
		}

		/// <summary>
		/// Returns the number of rows affected by the execution of the last INSERT, DELETE,
		/// or UPDATE statement executed by this statement object.
		/// </summary>
		/// int     The number of rows affected.
		public var rowCount(){

			return null;
		}

		/// <summary>
		/// Set a statement attribute.
		/// </summary>
		/// <param>string $key Attribute name.</param>
		/// <param>mixed  $val Attribute value.</param>
		/// <param>bool</param>
		/// <param name="key"></param>
		/// <param name="val"></param>
		public var setAttribute(var key, var val){

			return null;
		}

		/// <summary>
		/// Set the default fetch mode for this statement.
		/// </summary>
		/// <param>int   $mode The fetch mode.</param>
		/// <param>bool</param>
		/// <param name="mode"></param>
		public var setFetchMode(var mode){

			return null;
		}

	}//end Zend_Db_Statement

}//end namespace Db