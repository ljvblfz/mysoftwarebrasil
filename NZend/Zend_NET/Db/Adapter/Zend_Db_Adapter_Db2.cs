///////////////////////////////////////////////////////////
//  Zend_Db_Adapter_Db2.cs
//  Implementation of the Class Zend_Db_Adapter_Db2
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:21
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Adapter;
namespace Zend.Db.Adapter {
	/// <summary>
	/// @package    Zend_Db
	///        @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///        @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public class Zend_Db_Adapter_Db2 : Zend_Db_Adapter_Abstract {

		/// <summary>
		/// User-provided configuration.  Basic keys are:  username   => (string)  Connect
		/// to the database as this username. password   => (string)  Password associated
		/// with the username. host       => (string)  What host to connect to (default 127.
		/// 0.0.1) dbname     => (string)  The name of the database to user protocol   =>
		/// (string)  Protocol to use, defaults to "TCPIP" port       => (integer) Port
		/// number to use for TCP/IP if protocol is "TCPIP" persistent => (boolean) Set
		/// TRUE to use a persistent connection (db2_pconnect) os         => (string)  This
		/// should be set to 'i5' if the db is on an os400/i5 schema     => (string)  The
		/// default schema the connection should use
		///          @var array
		/// </summary>
		protected var _config = array(
		                  'dbname'       => null,
		                  'username'     => null,
		                  'password'     => null,
		                  'host'         => 'localhost',
		                  'port'         => '50000',
		                  'protocol'     => 'TCPIP',
		                  'persistent'   => false,
		                  'os'           => null,
		                  'schema'       => null
		              );
		/// <summary>
		/// Default class name for a DB statement.
		///          @var string
		/// </summary>
		protected var _defaultStmtClass = 'Zend_Db_Statement_Db2';
		/// <summary>
		/// Execution mode
		///          @var int execution flag (DB2_AUTOCOMMIT_ON or DB2_AUTOCOMMIT_OFF)
		/// </summary>
		protected var _execute_mode = DB2_AUTOCOMMIT_ON;
		protected var _isI5 = false;
		/// <summary>
		/// Keys are UPPERCASE SQL datatypes or the constants Zend_Db::INT_TYPE, Zend_Db::
		/// BIGINT_TYPE, or Zend_Db::FLOAT_TYPE.  Values are: 0 = 32-bit integer 1 = 64-bit
		/// integer 2 = float or decimal
		///          @var array Associative array of datatypes to values 0, 1, or 2.
		/// </summary>
		protected var _numericDataTypes = array(
		                  Zend_Db::INT_TYPE    => Zend_Db::INT_TYPE,
		                  Zend_Db::BIGINT_TYPE => Zend_Db::BIGINT_TYPE,
		                  Zend_Db::FLOAT_TYPE  => Zend_Db::FLOAT_TYPE,
		                  'INTEGER'            => Zend_Db::INT_TYPE,
		                  'SMALLINT'           => Zend_Db::INT_TYPE,
		                  'BIGINT'             => Zend_Db::BIGINT_TYPE,
		                  'DECIMAL'            => Zend_Db::FLOAT_TYPE,
		                  'NUMERIC'            => Zend_Db::FLOAT_TYPE
		              );

		public Zend_Db_Adapter_Db2(){

		}

		~Zend_Db_Adapter_Db2(){

		}

		public override void Dispose(){

		}

		/// <summary>
		/// Begin a transaction.
		/// </summary>
		/// void
		protected var _beginTransaction(){

			return null;
		}

		/// <summary>
		/// Commit a transaction.
		/// </summary>
		/// void
		protected var _commit(){

			return null;
		}

		/// <summary>
		/// Creates a connection resource.
		/// </summary>
		/// void
		protected var _connect(){

			return null;
		}

		/// <summary>
		/// Check the connection parameters according to verify type of used OS
		/// </summary>
		/// void
		protected var _determineI5(){

			return null;
		}

		/// <summary>
		/// Gets the execution mode
		/// </summary>
		/// int the execution mode (DB2_AUTOCOMMIT_ON or DB2_AUTOCOMMIT_OFF)
		public var _getExecuteMode(){

			return null;
		}

		/// 
		/// <param name="objectName"></param>
		/// <param name="idType"></param>
		protected var _i5LastInsertId(var objectName, var idType){

			return null;
		}

		/// <summary>
		/// Db2 On I5 specific method  Returns a list of the tables in the database . Used
		/// only for DB2/400.
		/// </summary>
		/// array
		/// <param name="schema"></param>
		protected var _i5listTables(var schema){

			return null;
		}

		/// <summary>
		/// Quote a raw string.
		/// </summary>
		/// <param>string $value     Raw string</param>
		/// <param>string           Quoted string</param>
		/// <param name="value"></param>
		protected var _quote(var value){

			return null;
		}

		/// <summary>
		/// Rollback a transaction.
		/// </summary>
		/// void
		protected var _rollBack(){

			return null;
		}

		/// <summary>
		/// @param integer $mode
		///          @return void
		/// </summary>
		/// <param name="mode"></param>
		public var _setExecuteMode(var mode){

			return null;
		}

		/// <summary>
		/// Force the connection to close.
		/// </summary>
		/// void
		public var closeConnection(){

			return null;
		}

		/// <summary>
		/// Returns the column descriptions for a table.  The return value is an
		/// associative array keyed by the column name, as returned by the RDBMS.  The
		/// value of each array element is an associative array with the following keys:
		/// SCHEMA_NAME      => string; name of database or schema TABLE_NAME       =>
		/// string; COLUMN_NAME      => string; column name COLUMN_POSITION  => number;
		/// ordinal position of column in table DATA_TYPE        => string; SQL datatype
		/// name of column DEFAULT          => string; default expression of column, null
		/// if none NULLABLE         => boolean; true if column can have nulls LENGTH
		///    => number; length of CHAR/VARCHAR SCALE            => number; scale of
		/// NUMERIC/DECIMAL PRECISION        => number; precision of NUMERIC/DECIMAL
		/// UNSIGNED         => boolean; unsigned property of an integer type DB2 not
		/// supports UNSIGNED integer. PRIMARY          => boolean; true if column is part
		/// of the primary key PRIMARY_POSITION => integer; position of column in primary
		/// key IDENTITY         => integer; true if column is auto-generated with unique
		/// values
		/// </summary>
		/// <param>string $tableName</param>
		/// <param>string $schemaName OPTIONAL</param>
		/// <param>array</param>
		/// <param name="tableName"></param>
		/// <param name="schemaName"></param>
		public var describeTable(var tableName, var schemaName){

			return null;
		}

		/// <summary>
		/// @return string
		/// </summary>
		public var getQuoteIdentifierSymbol(){

			return null;
		}

		/// <summary>
		/// Retrieve server version in PHP style
		/// </summary>
		/// string
		public var getServerVersion(){

			return null;
		}

		/// <summary>
		/// Test if a connection is active
		/// </summary>
		/// boolean
		public var isConnected(){

			return null;
		}

		/// <summary>
		/// Return whether or not this is running on i5
		/// </summary>
		/// bool
		public var isI5(){

			return null;
		}

		/// <summary>
		/// Gets the last ID generated automatically by an IDENTITY/AUTOINCREMENT column.
		/// As a convention, on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2), this method forms the name of a sequence from the arguments
		/// and returns the last id generated by that sequence. On RDBMS brands that
		/// support IDENTITY/AUTOINCREMENT columns, this method returns the last value
		/// generated for such a column, and the table name argument is disregarded.  The
		/// IDENTITY_VAL_LOCAL() function gives the last generated identity value in the
		/// current process, even if it was for a GENERATED column.
		/// </summary>
		/// <param>string $tableName OPTIONAL</param>
		/// <param>string $primaryKey OPTIONAL</param>
		/// <param>string $idType OPTIONAL used for i5 platform to define sequence/idenity
		/// unique value</param>
		/// <param>string</param>
		/// <param name="tableName"></param>
		/// <param name="primaryKey"></param>
		/// <param name="idType"></param>
		public var lastInsertId(var tableName, var primaryKey, var idType){

			return null;
		}

		/// <summary>
		/// Return the most recent value from the specified sequence in the database. This
		/// is supported only on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2).  Other RDBMS brands return null.
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>string</param>
		/// <param name="sequenceName"></param>
		public var lastSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Adds an adapter-specific LIMIT clause to the SELECT statement.
		/// </summary>
		/// <param>string $sql</param>
		/// <param>integer $count</param>
		/// <param>integer $offset OPTIONAL</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		/// <param name="count"></param>
		/// <param name="offset"></param>
		public var limit(var sql, var count, var offset){

			return null;
		}

		/// <summary>
		/// Returns a list of the tables in the database.
		/// </summary>
		/// <param>string $schema OPTIONAL</param>
		/// <param>array</param>
		/// <param name="schema"></param>
		public var listTables(var schema){

			return null;
		}

		/// <summary>
		/// Generate a new value from the specified sequence in the database, and return it.
		/// This is supported only on RDBMS brands that support sequences (e.g. Oracle,
		/// PostgreSQL, DB2).  Other RDBMS brands return null.
		/// </summary>
		/// <param>string $sequenceName</param>
		/// <param>string</param>
		/// <param name="sequenceName"></param>
		public var nextSequenceId(var sequenceName){

			return null;
		}

		/// <summary>
		/// Returns an SQL statement for preparation.
		/// </summary>
		/// <param>string $sql The SQL statement with placeholders.</param>
		/// <param>Zend_Db_Statement_Db2</param>
		/// <param name="sql"></param>
		public var prepare(var sql){

			return null;
		}

		/// <summary>
		/// Set the fetch mode.
		/// </summary>
		/// <param>integer $mode</param>
		/// <param>void</param>
		/// <param name="mode"></param>
		public var setFetchMode(var mode){

			return null;
		}

		/// <summary>
		/// Check if the adapter supports real SQL parameters.
		/// </summary>
		/// <param>string $type 'positional' or 'named'</param>
		/// <param>bool</param>
		/// <param name="type"></param>
		public var supportsParameters(var type){

			return null;
		}

	}//end Zend_Db_Adapter_Db2

}//end namespace Adapter