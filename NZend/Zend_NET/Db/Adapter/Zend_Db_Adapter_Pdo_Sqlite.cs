///////////////////////////////////////////////////////////
//  Zend_Db_Adapter_Pdo_Sqlite.cs
//  Implementation of the Class Zend_Db_Adapter_Pdo_Sqlite
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:19
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Adapter.Pdo;
namespace Zend.Db.Adapter.Pdo {
	/// <summary>
	/// Class for connecting to SQLite2 and SQLite3 databases and performing common
	/// operations.
	///          @category   Zend
	///          @package    Zend_Db
	///          @subpackage Adapter
	///          @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///          @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public class Zend_Db_Adapter_Pdo_Sqlite : Zend_Db_Adapter_Pdo_Abstract {

		/// <summary>
		/// Keys are UPPERCASE SQL datatypes or the constants Zend_Db::INT_TYPE, Zend_Db::
		/// BIGINT_TYPE, or Zend_Db::FLOAT_TYPE.  Values are: 0 = 32-bit integer 1 = 64-bit
		/// integer 2 = float or decimal
		///            @var array Associative array of datatypes to values 0, 1, or 2.
		/// </summary>
		protected var _numericDataTypes = array(
		                    Zend_Db::INT_TYPE    => Zend_Db::INT_TYPE,
		                    Zend_Db::BIGINT_TYPE => Zend_Db::BIGINT_TYPE,
		                    Zend_Db::FLOAT_TYPE  => Zend_Db::FLOAT_TYPE,
		                    'INTEGER'            => Zend_Db::BIGINT_TYPE,
		                    'REAL'               => Zend_Db::FLOAT_TYPE
		                );
		/// <summary>
		/// PDO type
		///            @var string
		/// </summary>
		protected var _pdoType = 'sqlite';

		public Zend_Db_Adapter_Pdo_Sqlite(){

		}

		~Zend_Db_Adapter_Pdo_Sqlite(){

		}

		public override void Dispose(){

		}

		/// <summary>
		/// Constructor.  $config is an array of key/value pairs containing configuration
		/// options.  Note that the SQLite options are different than most of the other PDO
		/// adapters in that no username or password are needed. Also, an extra config key
		/// "sqlite2" specifies compatibility mode.  dbname    => (string) The name of the
		/// database to user (required, use :memory: for memory-based database)  sqlite2
		/// => (boolean) PDO_SQLITE defaults to SQLite 3.  For compatibility with an older
		/// SQLite 2 database, set this to TRUE.
		/// </summary>
		/// <param>array $config An array of configuration keys.</param>
		/// <param name="config"></param>
		public var __construct(array config){

			return null;
		}

		/// <summary>
		/// Check for config options that are mandatory. Throw exceptions if any are
		/// missing.
		/// </summary>
		/// <param>array $config</param>
		/// <param name="config"></param>
		protected var _checkRequiredOptions(array config){

			return null;
		}

		/// <summary>
		/// Special configuration for SQLite behavior: make sure that result sets contain
		/// keys like 'column' instead of 'table.column'.
		/// </summary>
		protected var _connect(){

			return null;
		}

		/// <summary>
		/// DSN builder
		/// </summary>
		protected var _dsn(){

			return null;
		}

		/// <summary>
		/// Returns the column descriptions for a table.  The return value is an
		/// associative array keyed by the column name, as returned by the RDBMS.  The
		/// value of each array element is an associative array with the following keys:
		/// SCHEMA_NAME      => string; name of database or schema TABLE_NAME       =>
		/// string; COLUMN_NAME      => string; column name COLUMN_POSITION  => number;
		/// ordinal position of column in table DATA_TYPE        => string; SQL datatype
		/// name of column DEFAULT          => string; default expression of column, null
		/// if none NULLABLE         => boolean; true if column can have nulls LENGTH
		///    => number; length of CHAR/VARCHAR SCALE            => number; scale of
		/// NUMERIC/DECIMAL PRECISION        => number; precision of NUMERIC/DECIMAL
		/// UNSIGNED         => boolean; unsigned property of an integer type PRIMARY
		///   => boolean; true if column is part of the primary key PRIMARY_POSITION =>
		/// integer; position of column in primary key IDENTITY         => integer; true if
		/// column is auto-generated with unique values
		/// </summary>
		/// <param>string $tableName</param>
		/// <param>string $schemaName OPTIONAL</param>
		/// <param>array</param>
		/// <param name="tableName"></param>
		/// <param name="schemaName"></param>
		public var describeTable(var tableName, var schemaName){

			return null;
		}

		/// <summary>
		/// Adds an adapter-specific LIMIT clause to the SELECT statement.
		/// </summary>
		/// <param>string $sql</param>
		/// <param>integer $count</param>
		/// <param>integer $offset OPTIONAL</param>
		/// <param>string</param>
		/// <param name="sql"></param>
		/// <param name="count"></param>
		/// <param name="offset"></param>
		public var limit(var sql, var count, var offset){

			return null;
		}

		/// <summary>
		/// Returns a list of the tables in the database.
		/// </summary>
		/// array
		public var listTables(){

			return null;
		}

	}//end Zend_Db_Adapter_Pdo_Sqlite

}//end namespace Pdo