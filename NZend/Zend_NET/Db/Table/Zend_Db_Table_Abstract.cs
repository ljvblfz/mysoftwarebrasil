///////////////////////////////////////////////////////////
//  Zend_Db_Table_Abstract.cs
//  Implementation of the Class Zend_Db_Table_Abstract
//  Generated by Enterprise Architect
//  Created on:      08-jun-2011 22:13:48
//  Original author: alexis
///////////////////////////////////////////////////////////




using Zend.Db.Table;
namespace Zend.Db.Table {
	/// <summary>
	/// Class for SQL table interface.
	///        @category   Zend
	///        @package    Zend_Db
	///        @subpackage Table
	///        @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http:
	/// //www.zend.com)
	///        @license    http://framework.zend.com/license/new-bsd     New BSD
	/// License
	/// </summary>
	public abstract class Zend_Db_Table_Abstract {

		/// <summary>
		/// The table column names derived from Zend_Db_Adapter_Abstract::describeTable().
		/// 
		///          @var array
		/// </summary>
		protected var _cols;
		/// <summary>
		/// Zend_Db_Adapter_Abstract object.
		///          @var Zend_Db_Adapter_Abstract
		/// </summary>
		protected var _db;
		/// <summary>
		/// Default Zend_Db_Adapter_Abstract object.
		///          @var Zend_Db_Adapter_Abstract
		/// </summary>
		protected static var _defaultDb;
		/// <summary>
		/// Default cache for information provided by the adapter's describeTable() method.
		/// 
		///          @var Zend_Cache_Core
		/// </summary>
		protected static var _defaultMetadataCache = null;
		protected var _defaultSource = self::DEFAULT_NONE;
		protected var _defaultValues = array();
		/// <summary>
		/// Optional Zend_Db_Table_Definition object
		///          @var unknown_type
		/// </summary>
		protected var _definition = null;
		/// <summary>
		/// Optional definition config name used in concrete implementation
		///          @var string
		/// </summary>
		protected var _definitionConfigName = null;
		/// <summary>
		/// Simple array of class names of tables that are "children" of the current table,
		/// in other words tables that contain a foreign key to this one. Array elements
		/// are not table names; they are class names of classes that extend
		/// Zend_Db_Table_Abstract.
		///          @var array
		/// </summary>
		protected var _dependentTables = array();
		/// <summary>
		/// If your primary key is a compound key, and one of the columns uses an auto-
		/// increment or sequence-generated value, set _identity to the ordinal index in
		/// the $_primary array for that column. Note this index is the position of the
		/// column in the primary key, not the position of the column in the table.  The
		/// primary key array is 1-based.
		///          @var integer
		/// </summary>
		protected var _identity = 1;
		/// <summary>
		/// Information provided by the adapter's describeTable() method.
		///          @var array
		/// </summary>
		protected var _metadata = array();
		/// <summary>
		/// Cache for information provided by the adapter's describeTable() method.
		///          @var Zend_Cache_Core
		/// </summary>
		protected var _metadataCache = null;
		/// <summary>
		/// Flag: whether or not to cache metadata in the class
		///          @var bool
		/// </summary>
		protected var _metadataCacheInClass = true;
		/// <summary>
		/// The table name.
		///          @var string
		/// </summary>
		protected var _name = null;
		/// <summary>
		/// The primary key column or columns. A compound key should be declared as an
		/// array. You may declare a single-column primary key as a string.
		///          @var mixed
		/// </summary>
		protected var _primary = null;
		/// <summary>
		/// Associative array map of declarative referential integrity rules. This array
		/// has one entry per foreign key in the current table. Each key is a mnemonic name
		/// for one reference rule.  Each value is also an associative array, with the
		/// following keys: - columns       = array of names of column(s) in the child
		/// table. - refTableClass = class name of the parent table. - refColumns    =
		/// array of names of column(s) in the parent table, in the same order as those in
		/// the 'columns' entry. - onDelete      = "cascade" means that a delete in the
		/// parent table also causes a delete of referencing rows in the child table. -
		/// onUpdate      = "cascade" means that an update of primary key values in the
		/// parent table also causes an update of referencing rows in the child table.
		///          @var array
		/// </summary>
		protected var _referenceMap = array();
		/// <summary>
		/// Classname for row
		///          @var string
		/// </summary>
		protected var _rowClass = 'Zend_Db_Table_Row';
		/// <summary>
		/// Classname for rowset
		///          @var string
		/// </summary>
		protected var _rowsetClass = 'Zend_Db_Table_Rowset';
		/// <summary>
		/// The schema name (default null means current schema)
		///          @var array
		/// </summary>
		protected var _schema = null;
		/// <summary>
		/// Define the logic for new values in the primary key. May be a string, boolean
		/// true, or boolean false.
		///          @var mixed
		/// </summary>
		protected var _sequence = true;
		private readonly var ADAPTER = 'db';
		private readonly var CASCADE = 'cascade';
		private readonly var COLS = 'cols';
		private readonly var COLUMNS = 'columns';
		private readonly var DEFAULT_CLASS = 'defaultClass';
		private readonly var DEFAULT_DB = 'defaultDb';
		private readonly var DEFAULT_NONE = 'defaultNone';
		private readonly var DEFINITION = 'definition';
		private readonly var DEFINITION_CONFIG_NAME = 'definitionConfigName';
		private readonly var DEPENDENT_TABLES = 'dependentTables';
		private readonly var METADATA = 'metadata';
		private readonly var METADATA_CACHE = 'metadataCache';
		private readonly var METADATA_CACHE_IN_CLASS = 'metadataCacheInClass';
		private readonly var NAME = 'name';
		private readonly var ON_DELETE = 'onDelete';
		private readonly var ON_UPDATE = 'onUpdate';
		private readonly var PRIMARY = 'primary';
		private readonly var REF_COLUMNS = 'refColumns';
		private readonly var REF_TABLE_CLASS = 'refTableClass';
		private readonly var REFERENCE_MAP = 'referenceMap';
		private readonly var RESTRICT = 'restrict';
		private readonly var ROW_CLASS = 'rowClass';
		private readonly var ROWSET_CLASS = 'rowsetClass';
		private readonly var SCHEMA = 'schema';
		private readonly var SELECT_WITH_FROM_PART = true;
		private readonly var SELECT_WITHOUT_FROM_PART = false;
		private readonly var SEQUENCE = 'sequence';
		private readonly var SET_NULL = 'setNull';

		public Zend_Db_Table_Abstract(){

		}

		~Zend_Db_Table_Abstract(){

		}

		public virtual void Dispose(){

		}

		/// <summary>
		/// Constructor.  Supported params for $config are: - db              = user-
		/// supplied instance of database connector, or key name of registry instance. -
		/// name            = table name. - primary         = string or array of primary
		/// key(s). - rowClass        = row class name. - rowsetClass     = rowset class
		/// name. - referenceMap    = array structure to declare relationship to parent
		/// tables. - dependentTables = array of child tables. - metadataCache   = cache
		/// for information from adapter describeTable().
		/// </summary>
		/// <param>mixed $config Array of user-specified config options, or just the Db
		/// Adapter.</param>
		/// <param>void</param>
		/// <param name="config"></param>
		public var __construct(var config){

			return null;
		}

		/// <summary>
		/// Called by parent table's class during delete() method.
		/// </summary>
		/// <param>string $parentTableClassname</param>
		/// <param>array  $primaryKey</param>
		/// <param>int    Number of affected rows</param>
		/// <param name="parentTableClassname"></param>
		/// <param name="primaryKey"></param>
		public var _cascadeDelete(var parentTableClassname, array primaryKey){

			return null;
		}

		/// <summary>
		/// Called by a row object for the parent table's class during save() method.
		/// </summary>
		/// <param>string $parentTableClassname</param>
		/// <param>array  $oldPrimaryKey</param>
		/// <param>array  $newPrimaryKey</param>
		/// <param>int</param>
		/// <param name="parentTableClassname"></param>
		/// <param name="oldPrimaryKey"></param>
		/// <param name="newPrimaryKey"></param>
		public var _cascadeUpdate(var parentTableClassname, array oldPrimaryKey, array newPrimaryKey){

			return null;
		}

		/// <summary>
		/// Support method for fetching rows.
		/// </summary>
		/// <param>Zend_Db_Table_Select $select  query options.</param>
		/// <param>array An array containing the row results in FETCH_ASSOC mode.</param>
		/// <param name="select"></param>
		protected var _fetch(Zend_Db_Table_Select select){

			return null;
		}

		/// <summary>
		/// Retrieve table columns
		/// </summary>
		/// array
		protected var _getCols(){

			return null;
		}

		/// <summary>
		/// Returns a normalized version of the reference map
		/// </summary>
		/// array
		protected var _getReferenceMapNormalized(){

			return null;
		}

		/// <summary>
		/// Generate ORDER clause from user-supplied string or array
		/// </summary>
		/// <param>string|array $order  OPTIONAL An SQL ORDER clause.</param>
		/// <param>Zend_Db_Table_Select</param>
		/// <param name="select"></param>
		/// <param name="order"></param>
		protected var _order(Zend_Db_Table_Select select, var order){

			return null;
		}

		/// <summary>
		/// @param  mixed $db Either an Adapter object, or a string naming a Registry key
		///          @return Zend_Db_Table_Abstract Provides a fluent interface
		/// </summary>
		/// <param name="db"></param>
		protected var _setAdapter(var db){

			return null;
		}

		/// <summary>
		/// Sets the metadata cache for information returned by Zend_Db_Adapter_Abstract::
		/// describeTable().  If $metadataCache is null, then no metadata cache is used.
		/// Since there is no opportunity to reload metadata after instantiation, this
		/// method need not be public, particularly because that it would have no effect
		/// results in unnecessary API complexity. To configure the metadata cache, use the
		/// metadataCache configuration option for the class constructor upon instantiation.
		/// 
		/// </summary>
		/// <param>mixed $metadataCache Either a Cache object, or a string naming a
		/// Registry key</param>
		/// <param>Zend_Db_Table_Abstract Provides a fluent interface</param>
		/// <param name="metadataCache"></param>
		protected var _setMetadataCache(var metadataCache){

			return null;
		}

		/// <summary>
		/// Sets the sequence member, which defines the behavior for generating primary key
		/// values in new rows. - If this is a string, then the string names the sequence
		/// object. - If this is boolean true, then the key uses an auto-incrementing or
		/// identity mechanism. - If this is boolean false, then the key is user-defined.
		/// Use this for natural keys, for example.
		/// </summary>
		/// <param>mixed $sequence</param>
		/// <param>Zend_Db_Table_Adapter_Abstract Provides a fluent interface</param>
		/// <param name="sequence"></param>
		protected var _setSequence(var sequence){

			return null;
		}

		/// <summary>
		/// Turnkey for initialization of a table object. Calls other protected methods for
		/// individual tasks, to make it easier for a subclass to override part of the
		/// setup logic.
		/// </summary>
		/// void
		protected var _setup(){

			return null;
		}

		/// <summary>
		/// @param  mixed $db Either an Adapter object, or a string naming a Registry key
		///          @return Zend_Db_Adapter_Abstract
		/// </summary>
		/// <param name="db"></param>
		protected static var _setupAdapter(var db){

			return null;
		}

		/// <summary>
		/// Initialize database adapter.
		/// </summary>
		/// void
		protected var _setupDatabaseAdapter(){

			return null;
		}

		/// <summary>
		/// Initializes metadata.  If metadata cannot be loaded from cache, adapter's
		/// describeTable() method is called to discover metadata information. Returns true
		/// if and only if the metadata are loaded from cache.
		/// </summary>
		/// boolean
		protected var _setupMetadata(){

			return null;
		}

		/// <summary>
		/// @param mixed $metadataCache Either a Cache object, or a string naming a
		/// Registry key
		///          @return Zend_Cache_Core
		/// </summary>
		/// <param name="metadataCache"></param>
		protected static var _setupMetadataCache(var metadataCache){

			return null;
		}

		/// <summary>
		/// Initialize primary key from metadata. If $_primary is not defined, discover
		/// primary keys from the information returned by describeTable().
		/// </summary>
		/// void
		protected var _setupPrimaryKey(){

			return null;
		}

		/// <summary>
		/// Initialize table and schema names.  If the table name is not set in the class
		/// definition, use the class name itself as the table name.  A schema name
		/// provided with the table name (e.g., "schema.table") overrides any existing
		/// value for $this->_schema.
		/// </summary>
		/// void
		protected var _setupTableName(){

			return null;
		}

		/// <summary>
		/// Generate WHERE clause from user-supplied string or array
		/// </summary>
		/// <param>string|array $where  OPTIONAL An SQL WHERE clause.</param>
		/// <param>Zend_Db_Table_Select</param>
		/// <param name="select"></param>
		/// <param name="where"></param>
		protected var _where(Zend_Db_Table_Select select, var where){

			return null;
		}

		public var ADAPTER{
			get{
				return ADAPTER;
			}
			set{
				ADAPTER = value;
			}
		}

		/// <summary>
		/// Add a reference to the reference map
		/// </summary>
		/// <param>string $ruleKey</param>
		/// <param>string|array $columns</param>
		/// <param>string $refTableClass</param>
		/// <param>string|array $refColumns</param>
		/// <param>string $onDelete</param>
		/// <param>string $onUpdate</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="ruleKey"></param>
		/// <param name="columns"></param>
		/// <param name="refTableClass"></param>
		/// <param name="refColumns"></param>
		/// <param name="onDelete"></param>
		/// <param name="onUpdate"></param>
		public var addReference(var ruleKey, var columns, var refTableClass, var refColumns, var onDelete, var onUpdate){

			return null;
		}

		public var CASCADE{
			get{
				return CASCADE;
			}
			set{
				CASCADE = value;
			}
		}

		public var COLS{
			get{
				return COLS;
			}
			set{
				COLS = value;
			}
		}

		public var COLUMNS{
			get{
				return COLUMNS;
			}
			set{
				COLUMNS = value;
			}
		}

		/// <summary>
		/// Fetches a new blank row (not from the database).
		/// </summary>
		/// <param>array $data OPTIONAL data to populate in the new row.</param>
		/// <param>string $defaultSource OPTIONAL flag to force default values into new
		/// row</param>
		/// <param>Zend_Db_Table_Row_Abstract</param>
		/// <param name="data"></param>
		/// <param name="defaultSource"></param>
		public var createRow(array data, var defaultSource){

			return null;
		}

		public var DEFAULT_CLASS{
			get{
				return DEFAULT_CLASS;
			}
			set{
				DEFAULT_CLASS = value;
			}
		}

		public var DEFAULT_DB{
			get{
				return DEFAULT_DB;
			}
			set{
				DEFAULT_DB = value;
			}
		}

		public var DEFAULT_NONE{
			get{
				return DEFAULT_NONE;
			}
			set{
				DEFAULT_NONE = value;
			}
		}

		public var DEFINITION{
			get{
				return DEFINITION;
			}
			set{
				DEFINITION = value;
			}
		}

		public var DEFINITION_CONFIG_NAME{
			get{
				return DEFINITION_CONFIG_NAME;
			}
			set{
				DEFINITION_CONFIG_NAME = value;
			}
		}

		/// <summary>
		/// Deletes existing rows.
		/// </summary>
		/// <param>array|string $where SQL WHERE clause(s).</param>
		/// <param>int          The number of rows deleted.</param>
		/// <param name="where"></param>
		public var delete(var where){

			return null;
		}

		public var DEPENDENT_TABLES{
			get{
				return DEPENDENT_TABLES;
			}
			set{
				DEPENDENT_TABLES = value;
			}
		}

		/// <summary>
		/// Fetches all rows.  Honors the Zend_Db_Adapter fetch mode.
		/// </summary>
		/// <param>string|array|Zend_Db_Table_Select $where  OPTIONAL An SQL WHERE clause
		/// or Zend_Db_Table_Select object.</param>
		/// <param>string|array                      $order  OPTIONAL An SQL ORDER clause.
		/// </param>
		/// <param>int                               $count  OPTIONAL An SQL LIMIT count.
		/// </param>
		/// <param>int                               $offset OPTIONAL An SQL LIMIT offset.
		/// </param>
		/// <param>Zend_Db_Table_Rowset_Abstract The row results per the Zend_Db_Adapter
		/// fetch mode.</param>
		/// <param name="where"></param>
		/// <param name="order"></param>
		/// <param name="count"></param>
		/// <param name="offset"></param>
		public var fetchAll(var where, var order, var count, var offset){

			return null;
		}

		/// <summary>
		/// Fetches a new blank row (not from the database).
		/// </summary>
		/// Zend_Db_Table_Row_Abstract
		///          @deprecated since 0.9.3 - use createRow() instead.
		public var fetchNew(){

			return null;
		}

		/// <summary>
		/// Fetches one row in an object of type Zend_Db_Table_Row_Abstract, or returns
		/// null if no row matches the specified criteria.
		/// </summary>
		/// <param>string|array|Zend_Db_Table_Select $where  OPTIONAL An SQL WHERE clause
		/// or Zend_Db_Table_Select object.</param>
		/// <param>string|array                      $order  OPTIONAL An SQL ORDER clause.
		/// </param>
		/// <param>Zend_Db_Table_Row_Abstract|null The row results per the Zend_Db_Adapter
		/// fetch mode, or null if no row found.</param>
		/// <param name="where"></param>
		/// <param name="order"></param>
		public var fetchRow(var where, var order){

			return null;
		}

		/// <summary>
		/// Fetches rows by primary key.  The argument specifies one or more primary key
		/// value(s).  To find multiple rows by primary key, the argument must be an array.
		/// This method accepts a variable number of arguments.  If the table has a multi-
		/// column primary key, the number of arguments must be the same as the number of
		/// columns in the primary key.  To find multiple rows in a table with a multi-
		/// column primary key, each argument must be an array with the same number of
		/// elements.  The find() method always returns a Rowset object, even if only one
		/// row was found.
		/// </summary>
		/// <param>mixed $key The value(s) of the primary keys.</param>
		/// <param>Zend_Db_Table_Rowset_Abstract Row(s) matching the criteria.</param>
		public var find(){

			return null;
		}

		/// <summary>
		/// Gets the Zend_Db_Adapter_Abstract for this particular Zend_Db_Table object.
		/// </summary>
		/// Zend_Db_Adapter_Abstract
		public var getAdapter(){

			return null;
		}

		/// <summary>
		/// Gets the default Zend_Db_Adapter_Abstract for all Zend_Db_Table objects.
		/// </summary>
		/// Zend_Db_Adapter_Abstract or null
		public static var getDefaultAdapter(){

			return null;
		}

		/// <summary>
		/// Gets the default metadata cache for information returned by
		/// Zend_Db_Adapter_Abstract::describeTable().
		/// </summary>
		/// Zend_Cache_Core or null
		public static var getDefaultMetadataCache(){

			return null;
		}

		/// <summary>
		/// returns the default source flag that determines where defaultSources come from
		/// </summary>
		/// unknown
		public var getDefaultSource(){

			return null;
		}

		public var getDefaultValues(){

			return null;
		}

		/// <summary>
		/// getDefinition()
		/// </summary>
		/// Zend_Db_Table_Definition|null
		public var getDefinition(){

			return null;
		}

		/// <summary>
		/// getDefinitionConfigName()
		/// </summary>
		/// string
		public var getDefinitionConfigName(){

			return null;
		}

		/// <summary>
		/// @return array
		/// </summary>
		public var getDependentTables(){

			return null;
		}

		/// <summary>
		/// Gets the metadata cache for information returned by Zend_Db_Adapter_Abstract::
		/// describeTable().
		/// </summary>
		/// Zend_Cache_Core or null
		public var getMetadataCache(){

			return null;
		}

		/// <summary>
		/// @param string $tableClassname
		///          @param string $ruleKey OPTIONAL
		///          @return array
		/// </summary>
		/// <param name="tableClassname"></param>
		/// <param name="ruleKey"></param>
		public var getReference(var tableClassname, var ruleKey){

			return null;
		}

		/// <summary>
		/// @return string
		/// </summary>
		public var getRowClass(){

			return null;
		}

		/// <summary>
		/// @return string
		/// </summary>
		public var getRowsetClass(){

			return null;
		}

		/// <summary>
		/// Returns table information.  You can elect to return only a part of this
		/// information by supplying its key name, otherwise all information is returned as
		/// an array.
		/// </summary>
		/// <param>$key The specific info part to return OPTIONAL</param>
		/// <param>mixed</param>
		/// <param name="key"></param>
		public var info(var key){

			return null;
		}

		/// <summary>
		/// Initialize object  Called from {@link __construct()} as final step of object
		/// instantiation.
		///          @return void
		/// </summary>
		public var init(){

			return null;
		}

		/// <summary>
		/// Inserts a new row.
		/// </summary>
		/// <param>array  $data  Column-value pairs.</param>
		/// <param>mixed         The primary key of the row inserted.</param>
		/// <param name="data"></param>
		public var insert(array data){

			return null;
		}

		/// <summary>
		/// Check if the provided column is an identity of the table
		/// </summary>
		/// <param>string $column</param>
		/// <param>boolean</param>
		/// <param name="column"></param>
		public var isIdentity(var column){

			return null;
		}

		public var METADATA{
			get{
				return METADATA;
			}
			set{
				METADATA = value;
			}
		}

		public var METADATA_CACHE{
			get{
				return METADATA_CACHE;
			}
			set{
				METADATA_CACHE = value;
			}
		}

		public var METADATA_CACHE_IN_CLASS{
			get{
				return METADATA_CACHE_IN_CLASS;
			}
			set{
				METADATA_CACHE_IN_CLASS = value;
			}
		}

		/// <summary>
		/// Retrieve flag indicating if metadata should be cached for duration of instance
		/// </summary>
		/// bool
		public var metadataCacheInClass(){

			return null;
		}

		public var NAME{
			get{
				return NAME;
			}
			set{
				NAME = value;
			}
		}

		public var ON_DELETE{
			get{
				return ON_DELETE;
			}
			set{
				ON_DELETE = value;
			}
		}

		public var ON_UPDATE{
			get{
				return ON_UPDATE;
			}
			set{
				ON_UPDATE = value;
			}
		}

		public var PRIMARY{
			get{
				return PRIMARY;
			}
			set{
				PRIMARY = value;
			}
		}

		public var REF_COLUMNS{
			get{
				return REF_COLUMNS;
			}
			set{
				REF_COLUMNS = value;
			}
		}

		public var REF_TABLE_CLASS{
			get{
				return REF_TABLE_CLASS;
			}
			set{
				REF_TABLE_CLASS = value;
			}
		}

		public var REFERENCE_MAP{
			get{
				return REFERENCE_MAP;
			}
			set{
				REFERENCE_MAP = value;
			}
		}

		public var RESTRICT{
			get{
				return RESTRICT;
			}
			set{
				RESTRICT = value;
			}
		}

		public var ROW_CLASS{
			get{
				return ROW_CLASS;
			}
			set{
				ROW_CLASS = value;
			}
		}

		public var ROWSET_CLASS{
			get{
				return ROWSET_CLASS;
			}
			set{
				ROWSET_CLASS = value;
			}
		}

		public var SCHEMA{
			get{
				return SCHEMA;
			}
			set{
				SCHEMA = value;
			}
		}

		/// <summary>
		/// Returns an instance of a Zend_Db_Table_Select object.
		/// </summary>
		/// <param>bool $withFromPart Whether or not to include the from part of the select
		/// based on the table</param>
		/// <param>Zend_Db_Table_Select</param>
		/// <param name="withFromPart"></param>
		public var select(var withFromPart){

			return null;
		}

		public var SELECT_WITH_FROM_PART{
			get{
				return SELECT_WITH_FROM_PART;
			}
			set{
				SELECT_WITH_FROM_PART = value;
			}
		}

		public var SELECT_WITHOUT_FROM_PART{
			get{
				return SELECT_WITHOUT_FROM_PART;
			}
			set{
				SELECT_WITHOUT_FROM_PART = value;
			}
		}

		public var SEQUENCE{
			get{
				return SEQUENCE;
			}
			set{
				SEQUENCE = value;
			}
		}

		public var SET_NULL{
			get{
				return SET_NULL;
			}
			set{
				SET_NULL = value;
			}
		}

		/// <summary>
		/// Sets the default Zend_Db_Adapter_Abstract for all Zend_Db_Table objects.
		/// </summary>
		/// <param>mixed $db Either an Adapter object, or a string naming a Registry
		/// key</param>
		/// <param>void</param>
		/// <param name="db"></param>
		public static var setDefaultAdapter(var db){

			return null;
		}

		/// <summary>
		/// Sets the default metadata cache for information returned by
		/// Zend_Db_Adapter_Abstract::describeTable().  If $defaultMetadataCache is null,
		/// then no metadata cache is used by default.
		/// </summary>
		/// <param>mixed $metadataCache Either a Cache object, or a string naming a
		/// Registry key</param>
		/// <param>void</param>
		/// <param name="metadataCache"></param>
		public static var setDefaultMetadataCache(var metadataCache){

			return null;
		}

		/// <summary>
		/// set the defaultSource property - this tells the table class where to find
		/// default values
		/// </summary>
		/// <param>string $defaultSource</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="defaultSource"></param>
		public var setDefaultSource(var defaultSource){

			return null;
		}

		/// <summary>
		/// set the default values for the table class
		/// </summary>
		/// <param>array $defaultValues</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="defaultValues"></param>
		public var setDefaultValues(Array defaultValues){

			return null;
		}

		/// <summary>
		/// setDefinition()
		/// </summary>
		/// <param>Zend_Db_Table_Definition $definition</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="definition"></param>
		public var setDefinition(Zend_Db_Table_Definition definition){

			return null;
		}

		/// <summary>
		/// setDefinitionConfigName()
		/// </summary>
		/// <param>string $definition</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="definitionConfigName"></param>
		public var setDefinitionConfigName(var definitionConfigName){

			return null;
		}

		/// <summary>
		/// @param  array $dependentTables
		///          @return Zend_Db_Table_Abstract Provides a fluent interface
		/// </summary>
		/// <param name="dependentTables"></param>
		public var setDependentTables(array dependentTables){

			return null;
		}

		/// <summary>
		/// Indicate whether metadata should be cached in the class for the duration of the
		/// instance
		/// </summary>
		/// <param>bool $flag</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="flag"></param>
		public var setMetadataCacheInClass(var flag){

			return null;
		}

		/// <summary>
		/// setOptions()
		/// </summary>
		/// <param>array $options</param>
		/// <param>Zend_Db_Table_Abstract</param>
		/// <param name="options"></param>
		public var setOptions(Array options){

			return null;
		}

		/// <summary>
		/// @param array $referenceMap
		///          @return Zend_Db_Table_Abstract Provides a fluent interface
		/// </summary>
		/// <param name="referenceMap"></param>
		public var setReferences(array referenceMap){

			return null;
		}

		/// <summary>
		/// @param  string $classname
		///          @return Zend_Db_Table_Abstract Provides a fluent interface
		/// </summary>
		/// <param name="classname"></param>
		public var setRowClass(var classname){

			return null;
		}

		/// <summary>
		/// @param  string $classname
		///          @return Zend_Db_Table_Abstract Provides a fluent interface
		/// </summary>
		/// <param name="classname"></param>
		public var setRowsetClass(var classname){

			return null;
		}

		/// <summary>
		/// Updates existing rows.
		/// </summary>
		/// <param>array        $data  Column-value pairs.</param>
		/// <param>array|string $where An SQL WHERE clause, or an array of SQL WHERE
		/// clauses.</param>
		/// <param>int          The number of rows updated.</param>
		/// <param name="data"></param>
		/// <param name="where"></param>
		public var update(array data, var where){

			return null;
		}

	}//end Zend_Db_Table_Abstract

}//end namespace Table